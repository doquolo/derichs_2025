
derichs_gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006918  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08006a24  08006a24  00007a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb8  08006eb8  0000820c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006eb8  08006eb8  0000820c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006eb8  08006eb8  0000820c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb8  08006eb8  00007eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ebc  08006ebc  00007ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08006ec0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  2000020c  080070cc  0000820c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  080070cc  00008984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e89a  00000000  00000000  00008235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f23  00000000  00000000  00046acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002db0  00000000  00000000  0004a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022df  00000000  00000000  0004d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ee2  00000000  00000000  0004fa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff04  00000000  00000000  00069969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3ffd  00000000  00000000  0008986d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d86a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c74c  00000000  00000000  0012d8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00139ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000020c 	.word	0x2000020c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a0c 	.word	0x08006a0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000210 	.word	0x20000210
 8000148:	08006a0c 	.word	0x08006a0c

0800014c <u8x8_gpio_and_delay>:
static void MX_TIM3_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	460b      	mov	r3, r1
 8000158:	72fb      	strb	r3, [r7, #11]
 800015a:	4613      	mov	r3, r2
 800015c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800015e:	7afb      	ldrb	r3, [r7, #11]
 8000160:	2b29      	cmp	r3, #41	@ 0x29
 8000162:	d104      	bne.n	800016e <u8x8_gpio_and_delay+0x22>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000164:	7abb      	ldrb	r3, [r7, #10]
 8000166:	4618      	mov	r0, r3
 8000168:	f002 fdd6 	bl	8002d18 <HAL_Delay>
		break;
 800016c:	bf00      	nop
	}
	return 1;
 800016e:	2301      	movs	r3, #1
}
 8000170:	4618      	mov	r0, r3
 8000172:	3710      	adds	r7, #16
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}

08000178 <u8x8_i2c>:

uint8_t u8x8_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8000178:	b580      	push	{r7, lr}
 800017a:	b088      	sub	sp, #32
 800017c:	af02      	add	r7, sp, #8
 800017e:	60f8      	str	r0, [r7, #12]
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	72fb      	strb	r3, [r7, #11]
 8000186:	4613      	mov	r3, r2
 8000188:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32]; /* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 800018a:	7afb      	ldrb	r3, [r7, #11]
 800018c:	2b19      	cmp	r3, #25
 800018e:	d022      	beq.n	80001d6 <u8x8_i2c+0x5e>
 8000190:	2b19      	cmp	r3, #25
 8000192:	dc2d      	bgt.n	80001f0 <u8x8_i2c+0x78>
 8000194:	2b17      	cmp	r3, #23
 8000196:	d002      	beq.n	800019e <u8x8_i2c+0x26>
 8000198:	2b18      	cmp	r3, #24
 800019a:	d018      	beq.n	80001ce <u8x8_i2c+0x56>
 800019c:	e028      	b.n	80001f0 <u8x8_i2c+0x78>
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 80001a2:	e010      	b.n	80001c6 <u8x8_i2c+0x4e>
			buffer[buf_idx++] = *data;
 80001a4:	4b16      	ldr	r3, [pc, #88]	@ (8000200 <u8x8_i2c+0x88>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	1c5a      	adds	r2, r3, #1
 80001aa:	b2d1      	uxtb	r1, r2
 80001ac:	4a14      	ldr	r2, [pc, #80]	@ (8000200 <u8x8_i2c+0x88>)
 80001ae:	7011      	strb	r1, [r2, #0]
 80001b0:	461a      	mov	r2, r3
 80001b2:	697b      	ldr	r3, [r7, #20]
 80001b4:	7819      	ldrb	r1, [r3, #0]
 80001b6:	4b13      	ldr	r3, [pc, #76]	@ (8000204 <u8x8_i2c+0x8c>)
 80001b8:	5499      	strb	r1, [r3, r2]
			data++;
 80001ba:	697b      	ldr	r3, [r7, #20]
 80001bc:	3301      	adds	r3, #1
 80001be:	617b      	str	r3, [r7, #20]
			arg_int--;
 80001c0:	7abb      	ldrb	r3, [r7, #10]
 80001c2:	3b01      	subs	r3, #1
 80001c4:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 80001c6:	7abb      	ldrb	r3, [r7, #10]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d1eb      	bne.n	80001a4 <u8x8_i2c+0x2c>
		}
		break;
 80001cc:	e012      	b.n	80001f4 <u8x8_i2c+0x7c>
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80001ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000200 <u8x8_i2c+0x88>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	701a      	strb	r2, [r3, #0]
		break;
 80001d4:	e00e      	b.n	80001f4 <u8x8_i2c+0x7c>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, 0x78, buffer, buf_idx, 1000);
 80001d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000200 <u8x8_i2c+0x88>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	461a      	mov	r2, r3
 80001dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	4613      	mov	r3, r2
 80001e4:	4a07      	ldr	r2, [pc, #28]	@ (8000204 <u8x8_i2c+0x8c>)
 80001e6:	2178      	movs	r1, #120	@ 0x78
 80001e8:	4807      	ldr	r0, [pc, #28]	@ (8000208 <u8x8_i2c+0x90>)
 80001ea:	f004 f815 	bl	8004218 <HAL_I2C_Master_Transmit>
		break;
 80001ee:	e001      	b.n	80001f4 <u8x8_i2c+0x7c>
	default:
		return 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	e000      	b.n	80001f6 <u8x8_i2c+0x7e>
	}
	return 1;
 80001f4:	2301      	movs	r3, #1
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3718      	adds	r7, #24
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000559 	.word	0x20000559
 8000204:	2000055c 	.word	0x2000055c
 8000208:	2000029c 	.word	0x2000029c

0800020c <handleButtonDebounce>:

static u8g2_t u8g2;

const uint32_t buttonDebounceTime = 0; // ms
static uint8_t handleButtonDebounce(uint32_t *prev_time, uint32_t now,
		uint8_t newState, uint8_t currentState) {
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	60f8      	str	r0, [r7, #12]
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	4611      	mov	r1, r2
 8000218:	461a      	mov	r2, r3
 800021a:	460b      	mov	r3, r1
 800021c:	71fb      	strb	r3, [r7, #7]
 800021e:	4613      	mov	r3, r2
 8000220:	71bb      	strb	r3, [r7, #6]
	if (newState == currentState)
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	79bb      	ldrb	r3, [r7, #6]
 8000226:	429a      	cmp	r2, r3
 8000228:	d101      	bne.n	800022e <handleButtonDebounce+0x22>
		return currentState;
 800022a:	79bb      	ldrb	r3, [r7, #6]
 800022c:	e00c      	b.n	8000248 <handleButtonDebounce+0x3c>
	else {
		if (now - *prev_time > buttonDebounceTime) {
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	68ba      	ldr	r2, [r7, #8]
 8000234:	1ad3      	subs	r3, r2, r3
 8000236:	2200      	movs	r2, #0
 8000238:	4293      	cmp	r3, r2
 800023a:	d904      	bls.n	8000246 <handleButtonDebounce+0x3a>
			*prev_time = now;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	68ba      	ldr	r2, [r7, #8]
 8000240:	601a      	str	r2, [r3, #0]
			return newState;
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	e000      	b.n	8000248 <handleButtonDebounce+0x3c>
		} else
			return currentState;
 8000246:	79bb      	ldrb	r3, [r7, #6]
	}
}
 8000248:	4618      	mov	r0, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
	...

08000254 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000264:	f040 81cd 	bne.w	8000602 <HAL_TIM_PeriodElapsedCallback+0x3ae>
		uint32_t now = HAL_GetTick(); // Current time in ms
 8000268:	f002 fd4c 	bl	8002d04 <HAL_GetTick>
 800026c:	60f8      	str	r0, [r7, #12]

		// Left shoulder
		controller.LS.A2 = handleButtonDebounce(&controller_debounced.LS.A0,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0), controller.LS.A0);
 800026e:	2101      	movs	r1, #1
 8000270:	48ba      	ldr	r0, [pc, #744]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000272:	f003 fe75 	bl	8003f60 <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	461a      	mov	r2, r3
		controller.LS.A2 = handleButtonDebounce(&controller_debounced.LS.A0,
 800027a:	4bb9      	ldr	r3, [pc, #740]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800027c:	795b      	ldrb	r3, [r3, #5]
 800027e:	68f9      	ldr	r1, [r7, #12]
 8000280:	48b8      	ldr	r0, [pc, #736]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000282:	f7ff ffc3 	bl	800020c <handleButtonDebounce>
 8000286:	4603      	mov	r3, r0
 8000288:	461a      	mov	r2, r3
 800028a:	4bb5      	ldr	r3, [pc, #724]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800028c:	701a      	strb	r2, [r3, #0]
		controller.LS.A3 = handleButtonDebounce(&controller_debounced.LS.A3,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3), controller.LS.A3);
 800028e:	2108      	movs	r1, #8
 8000290:	48b2      	ldr	r0, [pc, #712]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000292:	f003 fe65 	bl	8003f60 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	461a      	mov	r2, r3
		controller.LS.A3 = handleButtonDebounce(&controller_debounced.LS.A3,
 800029a:	4bb1      	ldr	r3, [pc, #708]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800029c:	785b      	ldrb	r3, [r3, #1]
 800029e:	68f9      	ldr	r1, [r7, #12]
 80002a0:	48b1      	ldr	r0, [pc, #708]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80002a2:	f7ff ffb3 	bl	800020c <handleButtonDebounce>
 80002a6:	4603      	mov	r3, r0
 80002a8:	461a      	mov	r2, r3
 80002aa:	4bad      	ldr	r3, [pc, #692]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80002ac:	705a      	strb	r2, [r3, #1]
		controller.LS.B8 = handleButtonDebounce(&controller_debounced.LS.B8,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8), controller.LS.B8);
 80002ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b2:	48ae      	ldr	r0, [pc, #696]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80002b4:	f003 fe54 	bl	8003f60 <HAL_GPIO_ReadPin>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
		controller.LS.B8 = handleButtonDebounce(&controller_debounced.LS.B8,
 80002bc:	4ba8      	ldr	r3, [pc, #672]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80002be:	789b      	ldrb	r3, [r3, #2]
 80002c0:	68f9      	ldr	r1, [r7, #12]
 80002c2:	48ab      	ldr	r0, [pc, #684]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80002c4:	f7ff ffa2 	bl	800020c <handleButtonDebounce>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	4ba4      	ldr	r3, [pc, #656]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80002ce:	709a      	strb	r2, [r3, #2]
		controller.LS.B13 = handleButtonDebounce(&controller_debounced.LS.B13,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13), controller.LS.B13);
 80002d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002d4:	48a5      	ldr	r0, [pc, #660]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80002d6:	f003 fe43 	bl	8003f60 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
		controller.LS.B13 = handleButtonDebounce(&controller_debounced.LS.B13,
 80002de:	4ba0      	ldr	r3, [pc, #640]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80002e0:	78db      	ldrb	r3, [r3, #3]
 80002e2:	68f9      	ldr	r1, [r7, #12]
 80002e4:	48a3      	ldr	r0, [pc, #652]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80002e6:	f7ff ff91 	bl	800020c <handleButtonDebounce>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b9c      	ldr	r3, [pc, #624]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80002f0:	70da      	strb	r2, [r3, #3]
		controller.LS.A4 = handleButtonDebounce(&controller_debounced.LS.A4,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4), controller.LS.A4);
 80002f2:	2110      	movs	r1, #16
 80002f4:	4899      	ldr	r0, [pc, #612]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 80002f6:	f003 fe33 	bl	8003f60 <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461a      	mov	r2, r3
		controller.LS.A4 = handleButtonDebounce(&controller_debounced.LS.A4,
 80002fe:	4b98      	ldr	r3, [pc, #608]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	68f9      	ldr	r1, [r7, #12]
 8000304:	489c      	ldr	r0, [pc, #624]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000306:	f7ff ff81 	bl	800020c <handleButtonDebounce>
 800030a:	4603      	mov	r3, r0
 800030c:	461a      	mov	r2, r3
 800030e:	4b94      	ldr	r3, [pc, #592]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000310:	711a      	strb	r2, [r3, #4]
		controller.LS.A0 = handleButtonDebounce(&controller_debounced.LS.A2,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2), controller.LS.A2);
 8000312:	2104      	movs	r1, #4
 8000314:	4891      	ldr	r0, [pc, #580]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000316:	f003 fe23 	bl	8003f60 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
		controller.LS.A0 = handleButtonDebounce(&controller_debounced.LS.A2,
 800031e:	4b90      	ldr	r3, [pc, #576]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	68f9      	ldr	r1, [r7, #12]
 8000324:	4895      	ldr	r0, [pc, #596]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000326:	f7ff ff71 	bl	800020c <handleButtonDebounce>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	4b8c      	ldr	r3, [pc, #560]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000330:	715a      	strb	r2, [r3, #5]

		// Left dpad
		controller.LD.A8 = handleButtonDebounce(&controller_debounced.LD.A8,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8), controller.LD.A8);
 8000332:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000336:	4889      	ldr	r0, [pc, #548]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000338:	f003 fe12 	bl	8003f60 <HAL_GPIO_ReadPin>
 800033c:	4603      	mov	r3, r0
 800033e:	461a      	mov	r2, r3
		controller.LD.A8 = handleButtonDebounce(&controller_debounced.LD.A8,
 8000340:	4b87      	ldr	r3, [pc, #540]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000342:	799b      	ldrb	r3, [r3, #6]
 8000344:	68f9      	ldr	r1, [r7, #12]
 8000346:	488e      	ldr	r0, [pc, #568]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000348:	f7ff ff60 	bl	800020c <handleButtonDebounce>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	4b83      	ldr	r3, [pc, #524]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000352:	719a      	strb	r2, [r3, #6]
		controller.LD.A11 = handleButtonDebounce(&controller_debounced.LD.A11,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11), controller.LD.A11);
 8000354:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000358:	4880      	ldr	r0, [pc, #512]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 800035a:	f003 fe01 	bl	8003f60 <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
		controller.LD.A11 = handleButtonDebounce(&controller_debounced.LD.A11,
 8000362:	4b7f      	ldr	r3, [pc, #508]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000364:	79db      	ldrb	r3, [r3, #7]
 8000366:	68f9      	ldr	r1, [r7, #12]
 8000368:	4886      	ldr	r0, [pc, #536]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800036a:	f7ff ff4f 	bl	800020c <handleButtonDebounce>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b7b      	ldr	r3, [pc, #492]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000374:	71da      	strb	r2, [r3, #7]
		controller.LD.B2 = handleButtonDebounce(&controller_debounced.LD.B2,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2), controller.LD.B2);
 8000376:	2104      	movs	r1, #4
 8000378:	487c      	ldr	r0, [pc, #496]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 800037a:	f003 fdf1 	bl	8003f60 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
		controller.LD.B2 = handleButtonDebounce(&controller_debounced.LD.B2,
 8000382:	4b77      	ldr	r3, [pc, #476]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000384:	7a1b      	ldrb	r3, [r3, #8]
 8000386:	68f9      	ldr	r1, [r7, #12]
 8000388:	487f      	ldr	r0, [pc, #508]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800038a:	f7ff ff3f 	bl	800020c <handleButtonDebounce>
 800038e:	4603      	mov	r3, r0
 8000390:	461a      	mov	r2, r3
 8000392:	4b73      	ldr	r3, [pc, #460]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000394:	721a      	strb	r2, [r3, #8]
		controller.LD.B12 = handleButtonDebounce(&controller_debounced.LD.B12,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12), controller.LD.B12);
 8000396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800039a:	4874      	ldr	r0, [pc, #464]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 800039c:	f003 fde0 	bl	8003f60 <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	461a      	mov	r2, r3
		controller.LD.B12 = handleButtonDebounce(&controller_debounced.LD.B12,
 80003a4:	4b6e      	ldr	r3, [pc, #440]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80003a6:	7a5b      	ldrb	r3, [r3, #9]
 80003a8:	68f9      	ldr	r1, [r7, #12]
 80003aa:	4878      	ldr	r0, [pc, #480]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x338>)
 80003ac:	f7ff ff2e 	bl	800020c <handleButtonDebounce>
 80003b0:	4603      	mov	r3, r0
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80003b6:	725a      	strb	r2, [r3, #9]

		// Right shoulder
		controller.RS.C13 = handleButtonDebounce(&controller_debounced.RS.C13,
				now, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13), controller.RS.C13);
 80003b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003bc:	4874      	ldr	r0, [pc, #464]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80003be:	f003 fdcf 	bl	8003f60 <HAL_GPIO_ReadPin>
 80003c2:	4603      	mov	r3, r0
 80003c4:	461a      	mov	r2, r3
		controller.RS.C13 = handleButtonDebounce(&controller_debounced.RS.C13,
 80003c6:	4b66      	ldr	r3, [pc, #408]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80003c8:	7a9b      	ldrb	r3, [r3, #10]
 80003ca:	68f9      	ldr	r1, [r7, #12]
 80003cc:	4871      	ldr	r0, [pc, #452]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80003ce:	f7ff ff1d 	bl	800020c <handleButtonDebounce>
 80003d2:	4603      	mov	r3, r0
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b62      	ldr	r3, [pc, #392]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80003d8:	729a      	strb	r2, [r3, #10]
		controller.RS.A1 = handleButtonDebounce(&controller_debounced.RS.A1,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1), controller.RS.A1);
 80003da:	2102      	movs	r1, #2
 80003dc:	485f      	ldr	r0, [pc, #380]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 80003de:	f003 fdbf 	bl	8003f60 <HAL_GPIO_ReadPin>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
		controller.RS.A1 = handleButtonDebounce(&controller_debounced.RS.A1,
 80003e6:	4b5e      	ldr	r3, [pc, #376]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80003e8:	7adb      	ldrb	r3, [r3, #11]
 80003ea:	68f9      	ldr	r1, [r7, #12]
 80003ec:	486a      	ldr	r0, [pc, #424]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80003ee:	f7ff ff0d 	bl	800020c <handleButtonDebounce>
 80003f2:	4603      	mov	r3, r0
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b5a      	ldr	r3, [pc, #360]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80003f8:	72da      	strb	r2, [r3, #11]
		controller.RS.A5 = handleButtonDebounce(&controller_debounced.RS.A5,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5), controller.RS.A5);
 80003fa:	2120      	movs	r1, #32
 80003fc:	4857      	ldr	r0, [pc, #348]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 80003fe:	f003 fdaf 	bl	8003f60 <HAL_GPIO_ReadPin>
 8000402:	4603      	mov	r3, r0
 8000404:	461a      	mov	r2, r3
		controller.RS.A5 = handleButtonDebounce(&controller_debounced.RS.A5,
 8000406:	4b56      	ldr	r3, [pc, #344]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000408:	7b1b      	ldrb	r3, [r3, #12]
 800040a:	68f9      	ldr	r1, [r7, #12]
 800040c:	4863      	ldr	r0, [pc, #396]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x348>)
 800040e:	f7ff fefd 	bl	800020c <handleButtonDebounce>
 8000412:	4603      	mov	r3, r0
 8000414:	461a      	mov	r2, r3
 8000416:	4b52      	ldr	r3, [pc, #328]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000418:	731a      	strb	r2, [r3, #12]
		controller.RS.A12 = handleButtonDebounce(&controller_debounced.RS.A12,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12), controller.RS.A12);
 800041a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800041e:	484f      	ldr	r0, [pc, #316]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000420:	f003 fd9e 	bl	8003f60 <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
		controller.RS.A12 = handleButtonDebounce(&controller_debounced.RS.A12,
 8000428:	4b4d      	ldr	r3, [pc, #308]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800042a:	7b5b      	ldrb	r3, [r3, #13]
 800042c:	68f9      	ldr	r1, [r7, #12]
 800042e:	485c      	ldr	r0, [pc, #368]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000430:	f7ff feec 	bl	800020c <handleButtonDebounce>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	4b49      	ldr	r3, [pc, #292]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800043a:	735a      	strb	r2, [r3, #13]
		controller.RS.B9 = handleButtonDebounce(&controller_debounced.RS.B9,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9), controller.RS.B9);
 800043c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000440:	484a      	ldr	r0, [pc, #296]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000442:	f003 fd8d 	bl	8003f60 <HAL_GPIO_ReadPin>
 8000446:	4603      	mov	r3, r0
 8000448:	461a      	mov	r2, r3
		controller.RS.B9 = handleButtonDebounce(&controller_debounced.RS.B9,
 800044a:	4b45      	ldr	r3, [pc, #276]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800044c:	7b9b      	ldrb	r3, [r3, #14]
 800044e:	68f9      	ldr	r1, [r7, #12]
 8000450:	4854      	ldr	r0, [pc, #336]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000452:	f7ff fedb 	bl	800020c <handleButtonDebounce>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	4b41      	ldr	r3, [pc, #260]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800045c:	739a      	strb	r2, [r3, #14]
		controller.RS.PB11 = handleButtonDebounce(&controller_debounced.RS.PB11,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11), controller.RS.PB11);
 800045e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000462:	4842      	ldr	r0, [pc, #264]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000464:	f003 fd7c 	bl	8003f60 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
		controller.RS.PB11 = handleButtonDebounce(&controller_debounced.RS.PB11,
 800046c:	4b3c      	ldr	r3, [pc, #240]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800046e:	7bdb      	ldrb	r3, [r3, #15]
 8000470:	68f9      	ldr	r1, [r7, #12]
 8000472:	484d      	ldr	r0, [pc, #308]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000474:	f7ff feca 	bl	800020c <handleButtonDebounce>
 8000478:	4603      	mov	r3, r0
 800047a:	461a      	mov	r2, r3
 800047c:	4b38      	ldr	r3, [pc, #224]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800047e:	73da      	strb	r2, [r3, #15]

		// Right dpad
		controller.RD.B5 = handleButtonDebounce(&controller_debounced.RD.B5,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5), controller.RD.B5);
 8000480:	2120      	movs	r1, #32
 8000482:	483a      	ldr	r0, [pc, #232]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000484:	f003 fd6c 	bl	8003f60 <HAL_GPIO_ReadPin>
 8000488:	4603      	mov	r3, r0
 800048a:	461a      	mov	r2, r3
		controller.RD.B5 = handleButtonDebounce(&controller_debounced.RD.B5,
 800048c:	4b34      	ldr	r3, [pc, #208]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800048e:	7c1b      	ldrb	r3, [r3, #16]
 8000490:	68f9      	ldr	r1, [r7, #12]
 8000492:	4846      	ldr	r0, [pc, #280]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000494:	f7ff feba 	bl	800020c <handleButtonDebounce>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	4b30      	ldr	r3, [pc, #192]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800049e:	741a      	strb	r2, [r3, #16]
		controller.RD.B4 = handleButtonDebounce(&controller_debounced.RD.B4,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4), controller.RD.B4);
 80004a0:	2110      	movs	r1, #16
 80004a2:	4832      	ldr	r0, [pc, #200]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80004a4:	f003 fd5c 	bl	8003f60 <HAL_GPIO_ReadPin>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
		controller.RD.B4 = handleButtonDebounce(&controller_debounced.RD.B4,
 80004ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80004ae:	7c5b      	ldrb	r3, [r3, #17]
 80004b0:	68f9      	ldr	r1, [r7, #12]
 80004b2:	483f      	ldr	r0, [pc, #252]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80004b4:	f7ff feaa 	bl	800020c <handleButtonDebounce>
 80004b8:	4603      	mov	r3, r0
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b28      	ldr	r3, [pc, #160]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80004be:	745a      	strb	r2, [r3, #17]
		controller.RD.A15 = handleButtonDebounce(&controller_debounced.RD.A15,
				now, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15), controller.RD.A15);
 80004c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c4:	4825      	ldr	r0, [pc, #148]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x308>)
 80004c6:	f003 fd4b 	bl	8003f60 <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
		controller.RD.A15 = handleButtonDebounce(&controller_debounced.RD.A15,
 80004ce:	4b24      	ldr	r3, [pc, #144]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80004d0:	7c9b      	ldrb	r3, [r3, #18]
 80004d2:	68f9      	ldr	r1, [r7, #12]
 80004d4:	4837      	ldr	r0, [pc, #220]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80004d6:	f7ff fe99 	bl	800020c <handleButtonDebounce>
 80004da:	4603      	mov	r3, r0
 80004dc:	461a      	mov	r2, r3
 80004de:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80004e0:	749a      	strb	r2, [r3, #18]
		controller.RD.B3 = handleButtonDebounce(&controller_debounced.RD.B3,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), controller.RD.B3);
 80004e2:	2108      	movs	r1, #8
 80004e4:	4821      	ldr	r0, [pc, #132]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80004e6:	f003 fd3b 	bl	8003f60 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
		controller.RD.B3 = handleButtonDebounce(&controller_debounced.RD.B3,
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80004f0:	7cdb      	ldrb	r3, [r3, #19]
 80004f2:	68f9      	ldr	r1, [r7, #12]
 80004f4:	4830      	ldr	r0, [pc, #192]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80004f6:	f7ff fe89 	bl	800020c <handleButtonDebounce>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b18      	ldr	r3, [pc, #96]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000500:	74da      	strb	r2, [r3, #19]

		// Alternate buttons
		controller.ALT.C15 = handleButtonDebounce(&controller_debounced.ALT.C15,
				now, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15), controller.ALT.C15);
 8000502:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000506:	4822      	ldr	r0, [pc, #136]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000508:	f003 fd2a 	bl	8003f60 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
		controller.ALT.C15 = handleButtonDebounce(&controller_debounced.ALT.C15,
 8000510:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000512:	7d1b      	ldrb	r3, [r3, #20]
 8000514:	68f9      	ldr	r1, [r7, #12]
 8000516:	4829      	ldr	r0, [pc, #164]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000518:	f7ff fe78 	bl	800020c <handleButtonDebounce>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000522:	751a      	strb	r2, [r3, #20]
		controller.ALT.C14 = handleButtonDebounce(&controller_debounced.ALT.C14,
				now, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14), controller.ALT.C14);
 8000524:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000528:	4819      	ldr	r0, [pc, #100]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800052a:	f003 fd19 	bl	8003f60 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
		controller.ALT.C14 = handleButtonDebounce(&controller_debounced.ALT.C14,
 8000532:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000534:	7d5b      	ldrb	r3, [r3, #21]
 8000536:	68f9      	ldr	r1, [r7, #12]
 8000538:	4821      	ldr	r0, [pc, #132]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800053a:	f7ff fe67 	bl	800020c <handleButtonDebounce>
 800053e:	4603      	mov	r3, r0
 8000540:	461a      	mov	r2, r3
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000544:	755a      	strb	r2, [r3, #21]

		// Joystick
		controller.JOY.BTN = handleButtonDebounce(&controller_debounced.JOY.BTN,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14), controller.JOY.BTN);
 8000546:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800054a:	4808      	ldr	r0, [pc, #32]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x318>)
 800054c:	f003 fd08 	bl	8003f60 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
		controller.JOY.BTN = handleButtonDebounce(&controller_debounced.JOY.BTN,
 8000554:	4b02      	ldr	r3, [pc, #8]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000556:	7e9b      	ldrb	r3, [r3, #26]
 8000558:	e034      	b.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0x370>
 800055a:	bf00      	nop
 800055c:	40010800 	.word	0x40010800
 8000560:	200003c8 	.word	0x200003c8
 8000564:	200003fc 	.word	0x200003fc
 8000568:	200003ec 	.word	0x200003ec
 800056c:	40010c00 	.word	0x40010c00
 8000570:	200003f0 	.word	0x200003f0
 8000574:	200003f4 	.word	0x200003f4
 8000578:	200003f8 	.word	0x200003f8
 800057c:	200003e8 	.word	0x200003e8
 8000580:	20000400 	.word	0x20000400
 8000584:	20000404 	.word	0x20000404
 8000588:	20000408 	.word	0x20000408
 800058c:	2000040c 	.word	0x2000040c
 8000590:	40011000 	.word	0x40011000
 8000594:	20000410 	.word	0x20000410
 8000598:	20000414 	.word	0x20000414
 800059c:	20000418 	.word	0x20000418
 80005a0:	2000041c 	.word	0x2000041c
 80005a4:	20000420 	.word	0x20000420
 80005a8:	20000424 	.word	0x20000424
 80005ac:	20000428 	.word	0x20000428
 80005b0:	2000042c 	.word	0x2000042c
 80005b4:	20000430 	.word	0x20000430
 80005b8:	20000434 	.word	0x20000434
 80005bc:	20000438 	.word	0x20000438
 80005c0:	2000043c 	.word	0x2000043c
 80005c4:	68f9      	ldr	r1, [r7, #12]
 80005c6:	4811      	ldr	r0, [pc, #68]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80005c8:	f7ff fe20 	bl	800020c <handleButtonDebounce>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80005d2:	769a      	strb	r2, [r3, #26]

		// Encoder
		controller.ENC.BTN = handleButtonDebounce(&controller_debounced.ENC.BTN,
				now, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15), controller.ENC.BTN);
 80005d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d8:	480e      	ldr	r0, [pc, #56]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80005da:	f003 fcc1 	bl	8003f60 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
		controller.ENC.BTN = handleButtonDebounce(&controller_debounced.ENC.BTN,
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80005e4:	7edb      	ldrb	r3, [r3, #27]
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80005ea:	f7ff fe0f 	bl	800020c <handleButtonDebounce>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80005f4:	76da      	strb	r2, [r3, #27]
		controller.ENC.VALUE = ((TIM3->CNT) >> 2);
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80005f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005fa:	089b      	lsrs	r3, r3, #2
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8000600:	771a      	strb	r2, [r3, #28]
	}
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000440 	.word	0x20000440
 8000610:	200003c8 	.word	0x200003c8
 8000614:	40010c00 	.word	0x40010c00
 8000618:	20000444 	.word	0x20000444
 800061c:	40000400 	.word	0x40000400

08000620 <HAL_UART_RxCpltCallback>:
uint8_t rx_line_buffer[RX_BUFFER_SIZE]; // Line buffer
volatile uint16_t rx_index = 0;
volatile uint8_t line_received = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1a      	ldr	r2, [pc, #104]	@ (8000698 <HAL_UART_RxCpltCallback+0x78>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d12d      	bne.n	800068e <HAL_UART_RxCpltCallback+0x6e>
        if (rx_byte == '\n' || rx_index >= RX_BUFFER_SIZE - 1) {
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <HAL_UART_RxCpltCallback+0x7c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d004      	beq.n	8000644 <HAL_UART_RxCpltCallback+0x24>
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	b29b      	uxth	r3, r3
 8000640:	2b62      	cmp	r3, #98	@ 0x62
 8000642:	d913      	bls.n	800066c <HAL_UART_RxCpltCallback+0x4c>
            rx_line_buffer[rx_index] = '\0'; // Null-terminate
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b29b      	uxth	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <HAL_UART_RxCpltCallback+0x84>)
 800064e:	2100      	movs	r1, #0
 8000650:	5499      	strb	r1, [r3, r2]
			u8g2_DrawStr(&u8g2, 80, 25, rx_line_buffer);
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_UART_RxCpltCallback+0x84>)
 8000654:	2219      	movs	r2, #25
 8000656:	2150      	movs	r1, #80	@ 0x50
 8000658:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <HAL_UART_RxCpltCallback+0x88>)
 800065a:	f001 fb0f 	bl	8001c7c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2); // Transfer the buffer to the display
 800065e:	4812      	ldr	r0, [pc, #72]	@ (80006a8 <HAL_UART_RxCpltCallback+0x88>)
 8000660:	f000 fdfc 	bl	800125c <u8g2_SendBuffer>
            rx_index = 0; // Reset for next line
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000666:	2200      	movs	r2, #0
 8000668:	801a      	strh	r2, [r3, #0]
 800066a:	e00b      	b.n	8000684 <HAL_UART_RxCpltCallback+0x64>
        } else {
            rx_line_buffer[rx_index++] = rx_byte;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	b291      	uxth	r1, r2
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000678:	8011      	strh	r1, [r2, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <HAL_UART_RxCpltCallback+0x7c>)
 800067e:	7819      	ldrb	r1, [r3, #0]
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <HAL_UART_RxCpltCallback+0x84>)
 8000682:	5499      	strb	r1, [r3, r2]
        }

        // Continue receiving next byte
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	4905      	ldr	r1, [pc, #20]	@ (800069c <HAL_UART_RxCpltCallback+0x7c>)
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <HAL_UART_RxCpltCallback+0x8c>)
 800068a:	f005 fc04 	bl	8005e96 <HAL_UART_Receive_IT>
    }
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40013800 	.word	0x40013800
 800069c:	200004d0 	.word	0x200004d0
 80006a0:	20000538 	.word	0x20000538
 80006a4:	200004d4 	.word	0x200004d4
 80006a8:	20000448 	.word	0x20000448
 80006ac:	20000380 	.word	0x20000380

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f002 facd 	bl	8002c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f899 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 fa57 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c2:	f000 fa37 	bl	8000b34 <MX_DMA_Init>
  MX_ADC1_Init();
 80006c6:	f000 f8ef 	bl	80008a8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006ca:	f000 f969 	bl	80009a0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006ce:	f000 fa07 	bl	8000ae0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80006d2:	f000 f9b1 	bl	8000a38 <MX_TIM3_Init>
  MX_I2C1_Init();
 80006d6:	f000 f935 	bl	8000944 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	4933      	ldr	r1, [pc, #204]	@ (80007ac <main+0xfc>)
 80006de:	4834      	ldr	r0, [pc, #208]	@ (80007b0 <main+0x100>)
 80006e0:	f005 fbd9 	bl	8005e96 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80006e4:	4833      	ldr	r0, [pc, #204]	@ (80007b4 <main+0x104>)
 80006e6:	f004 fe05 	bl	80052f4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)controller.JOY.VALUE, 2);
 80006ea:	2202      	movs	r2, #2
 80006ec:	4932      	ldr	r1, [pc, #200]	@ (80007b8 <main+0x108>)
 80006ee:	4833      	ldr	r0, [pc, #204]	@ (80007bc <main+0x10c>)
 80006f0:	f002 fc0e 	bl	8002f10 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80006f4:	213c      	movs	r1, #60	@ 0x3c
 80006f6:	4832      	ldr	r0, [pc, #200]	@ (80007c0 <main+0x110>)
 80006f8:	f004 fef0 	bl	80054dc <HAL_TIM_Encoder_Start>
	/* Initialize Display */
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_i2c,
 80006fc:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <main+0x114>)
 80006fe:	4a32      	ldr	r2, [pc, #200]	@ (80007c8 <main+0x118>)
 8000700:	4932      	ldr	r1, [pc, #200]	@ (80007cc <main+0x11c>)
 8000702:	4833      	ldr	r0, [pc, #204]	@ (80007d0 <main+0x120>)
 8000704:	f000 fdc8 	bl	8001298 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 8000708:	4831      	ldr	r0, [pc, #196]	@ (80007d0 <main+0x120>)
 800070a:	f002 f9dc 	bl	8002ac6 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 800070e:	2100      	movs	r1, #0
 8000710:	482f      	ldr	r0, [pc, #188]	@ (80007d0 <main+0x120>)
 8000712:	f002 f9e7 	bl	8002ae4 <u8x8_SetPowerSave>

	u8g2_ClearBuffer(&u8g2); // Clear the buffer before drawing
 8000716:	482e      	ldr	r0, [pc, #184]	@ (80007d0 <main+0x120>)
 8000718:	f000 fd2d 	bl	8001176 <u8g2_ClearBuffer>
	u8g2_DrawXBM(&u8g2, 32, 0, 64, 64, logoTruong);
 800071c:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <main+0x124>)
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	2340      	movs	r3, #64	@ 0x40
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2340      	movs	r3, #64	@ 0x40
 8000726:	2200      	movs	r2, #0
 8000728:	2120      	movs	r1, #32
 800072a:	4829      	ldr	r0, [pc, #164]	@ (80007d0 <main+0x120>)
 800072c:	f000 fce0 	bl	80010f0 <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2); // Transfer the buffer to the display
 8000730:	4827      	ldr	r0, [pc, #156]	@ (80007d0 <main+0x120>)
 8000732:	f000 fd93 	bl	800125c <u8g2_SendBuffer>
	HAL_Delay(2000);
 8000736:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800073a:	f002 faed 	bl	8002d18 <HAL_Delay>
	u8g2_ClearBuffer(&u8g2); // Clear the buffer before drawing
 800073e:	4824      	ldr	r0, [pc, #144]	@ (80007d0 <main+0x120>)
 8000740:	f000 fd19 	bl	8001176 <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_6x10_tr);
 8000744:	4924      	ldr	r1, [pc, #144]	@ (80007d8 <main+0x128>)
 8000746:	4822      	ldr	r0, [pc, #136]	@ (80007d0 <main+0x120>)
 8000748:	f001 fb36 	bl	8001db8 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, 80, 20, "No data!");
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <main+0x12c>)
 800074e:	2214      	movs	r2, #20
 8000750:	2150      	movs	r1, #80	@ 0x50
 8000752:	481f      	ldr	r0, [pc, #124]	@ (80007d0 <main+0x120>)
 8000754:	f001 fa92 	bl	8001c7c <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, 10, "Robot 1");
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <main+0x130>)
 800075a:	220a      	movs	r2, #10
 800075c:	2100      	movs	r1, #0
 800075e:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <main+0x120>)
 8000760:	f001 fa8c 	bl	8001c7c <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2); // Transfer the buffer to the display
 8000764:	481a      	ldr	r0, [pc, #104]	@ (80007d0 <main+0x120>)
 8000766:	f000 fd79 	bl	800125c <u8g2_SendBuffer>
	HAL_Delay(150);
 800076a:	2096      	movs	r0, #150	@ 0x96
 800076c:	f002 fad4 	bl	8002d18 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		memcpy(controllerBuffer, &controller, sizeof(controller));
 8000770:	4a1c      	ldr	r2, [pc, #112]	@ (80007e4 <main+0x134>)
 8000772:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <main+0x138>)
 8000774:	4614      	mov	r4, r2
 8000776:	461d      	mov	r5, r3
 8000778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000780:	c407      	stmia	r4!, {r0, r1, r2}
 8000782:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, START_MARKER, sizeof(START_MARKER), 1000);
 8000784:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000788:	2201      	movs	r2, #1
 800078a:	4918      	ldr	r1, [pc, #96]	@ (80007ec <main+0x13c>)
 800078c:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <main+0x100>)
 800078e:	f005 faf7 	bl	8005d80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, controllerBuffer, sizeof(controllerBuffer),
 8000792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000796:	221d      	movs	r2, #29
 8000798:	4912      	ldr	r1, [pc, #72]	@ (80007e4 <main+0x134>)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <main+0x100>)
 800079c:	f005 faf0 	bl	8005d80 <HAL_UART_Transmit>
				1000);
		HAL_Delay(25); // wait for 25ms for next transsmition
 80007a0:	2019      	movs	r0, #25
 80007a2:	f002 fab9 	bl	8002d18 <HAL_Delay>
	while (1) {
 80007a6:	bf00      	nop
 80007a8:	e7e2      	b.n	8000770 <main+0xc0>
 80007aa:	bf00      	nop
 80007ac:	200004d0 	.word	0x200004d0
 80007b0:	20000380 	.word	0x20000380
 80007b4:	200002f0 	.word	0x200002f0
 80007b8:	200003de 	.word	0x200003de
 80007bc:	20000228 	.word	0x20000228
 80007c0:	20000338 	.word	0x20000338
 80007c4:	0800014d 	.word	0x0800014d
 80007c8:	08000179 	.word	0x08000179
 80007cc:	08006e28 	.word	0x08006e28
 80007d0:	20000448 	.word	0x20000448
 80007d4:	20000000 	.word	0x20000000
 80007d8:	08006a54 	.word	0x08006a54
 80007dc:	08006a24 	.word	0x08006a24
 80007e0:	08006a30 	.word	0x08006a30
 80007e4:	2000053c 	.word	0x2000053c
 80007e8:	200003c8 	.word	0x200003c8
 80007ec:	08006a38 	.word	0x08006a38

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	@ 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007fa:	2228      	movs	r2, #40	@ 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 f8d8 	bl	80069b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800083a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800083c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000840:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000846:	4618      	mov	r0, r3
 8000848:	f004 f83e 	bl	80048c8 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000852:	f000 f9fb 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000866:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f004 faaa 	bl	8004dcc <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800087e:	f000 f9e5 	bl	8000c4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000882:	2302      	movs	r3, #2
 8000884:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800088a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fc2a 	bl	80050e8 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800089a:	f000 f9d7 	bl	8000c4c <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	@ 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b8:	4b20      	ldr	r3, [pc, #128]	@ (800093c <MX_ADC1_Init+0x94>)
 80008ba:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <MX_ADC1_Init+0x98>)
 80008bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008be:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <MX_ADC1_Init+0x94>)
 80008c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <MX_ADC1_Init+0x94>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_ADC1_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_ADC1_Init+0x94>)
 80008d4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80008d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_ADC1_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_ADC1_Init+0x94>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e6:	4815      	ldr	r0, [pc, #84]	@ (800093c <MX_ADC1_Init+0x94>)
 80008e8:	f002 fa3a 	bl	8002d60 <HAL_ADC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80008f2:	f000 f9ab 	bl	8000c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008f6:	2308      	movs	r3, #8
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80008fe:	2304      	movs	r3, #4
 8000900:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	4619      	mov	r1, r3
 8000906:	480d      	ldr	r0, [pc, #52]	@ (800093c <MX_ADC1_Init+0x94>)
 8000908:	f002 fbfc 	bl	8003104 <HAL_ADC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 f99b 	bl	8000c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000916:	2309      	movs	r3, #9
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800091a:	2302      	movs	r3, #2
 800091c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <MX_ADC1_Init+0x94>)
 8000924:	f002 fbee 	bl	8003104 <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800092e:	f000 f98d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000228 	.word	0x20000228
 8000940:	40012400 	.word	0x40012400

08000944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_I2C1_Init+0x50>)
 800094a:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <MX_I2C1_Init+0x54>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000950:	4a12      	ldr	r2, [pc, #72]	@ (800099c <MX_I2C1_Init+0x58>)
 8000952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000962:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000982:	f003 fb05 	bl	8003f90 <HAL_I2C_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800098c:	f000 f95e 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000029c 	.word	0x2000029c
 8000998:	40005400 	.word	0x40005400
 800099c:	000186a0 	.word	0x000186a0

080009a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 143;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009c6:	228f      	movs	r2, #143	@ 0x8f
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009d2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80009d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009e0:	2280      	movs	r2, #128	@ 0x80
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e4:	4813      	ldr	r0, [pc, #76]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009e6:	f004 fc35 	bl	8005254 <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009f0:	f000 f92c 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4619      	mov	r1, r3
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <MX_TIM2_Init+0x94>)
 8000a02:	f004 fee9 	bl	80057d8 <HAL_TIM_ConfigClockSource>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a0c:	f000 f91e 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_TIM2_Init+0x94>)
 8000a1e:	f005 f8ef 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f000 f910 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200002f0 	.word	0x200002f0

08000a38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	@ 0x30
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2224      	movs	r2, #36	@ 0x24
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f005 ffb4 	bl	80069b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_TIM3_Init+0xa0>)
 8000a56:	4a21      	ldr	r2, [pc, #132]	@ (8000adc <MX_TIM3_Init+0xa4>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_TIM3_Init+0xa0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_TIM3_Init+0xa0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_TIM3_Init+0xa0>)
 8000a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_TIM3_Init+0xa0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_TIM3_Init+0xa0>)
 8000a76:	2280      	movs	r2, #128	@ 0x80
 8000a78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a82:	2301      	movs	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a92:	2301      	movs	r3, #1
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <MX_TIM3_Init+0xa0>)
 8000aa6:	f004 fc77 	bl	8005398 <HAL_TIM_Encoder_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f000 f8cc 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_TIM3_Init+0xa0>)
 8000ac2:	f005 f89d 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000acc:	f000 f8be 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	@ 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000338 	.word	0x20000338
 8000adc:	40000400 	.word	0x40000400

08000ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <MX_USART1_UART_Init+0x50>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b18:	f005 f8e2 	bl	8005ce0 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b22:	f000 f893 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000380 	.word	0x20000380
 8000b30:	40013800 	.word	0x40013800

08000b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_DMA_Init+0x38>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b6c <MX_DMA_Init+0x38>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_DMA_Init+0x38>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	200b      	movs	r0, #11
 8000b58:	f002 fda5 	bl	80036a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b5c:	200b      	movs	r0, #11
 8000b5e:	f002 fdbe 	bl	80036de <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b2d      	ldr	r3, [pc, #180]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a2c      	ldr	r2, [pc, #176]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b2a      	ldr	r3, [pc, #168]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9c:	4b27      	ldr	r3, [pc, #156]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a26      	ldr	r2, [pc, #152]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000ba2:	f043 0320 	orr.w	r3, r3, #32
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0320 	and.w	r3, r3, #32
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a20      	ldr	r2, [pc, #128]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000bd2:	f043 0308 	orr.w	r3, r3, #8
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_GPIO_Init+0xcc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0308 	and.w	r3, r3, #8
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RS_C13_Pin ALT_C14_Pin ALT_C15_Pin */
  GPIO_InitStruct.Pin = RS_C13_Pin|ALT_C14_Pin|ALT_C15_Pin;
 8000be4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_GPIO_Init+0xd0>)
 8000bfa:	f003 f82d 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_A0_Pin RS_A1_Pin LS_A2_Pin LS_A3_Pin
                           LS_A4_Pin RS_A5_Pin LD_A8_Pin LD_A11_Pin
                           RS_A12_Pin RD_A15_Pin */
  GPIO_InitStruct.Pin = LS_A0_Pin|RS_A1_Pin|LS_A2_Pin|LS_A3_Pin
 8000bfe:	f649 133f 	movw	r3, #39231	@ 0x993f
 8000c02:	613b      	str	r3, [r7, #16]
                          |LS_A4_Pin|RS_A5_Pin|LD_A8_Pin|LD_A11_Pin
                          |RS_A12_Pin|RD_A15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <MX_GPIO_Init+0xd4>)
 8000c14:	f003 f820 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_B2_Pin RS_B11_Pin LD_B12_Pin RS_B13_Pin
                           JOY_BTN_Pin ENC_BTN_Pin RD_B3_Pin RD_B4_Pin
                           RD_B5_Pin RS_B8_Pin RS_B9_Pin */
  GPIO_InitStruct.Pin = LD_B2_Pin|RS_B11_Pin|LD_B12_Pin|RS_B13_Pin
 8000c18:	f64f 7338 	movw	r3, #65336	@ 0xff38
 8000c1c:	613b      	str	r3, [r7, #16]
                          |JOY_BTN_Pin|ENC_BTN_Pin|RD_B3_Pin|RD_B4_Pin
                          |RD_B5_Pin|RS_B8_Pin|RS_B9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <MX_GPIO_Init+0xd8>)
 8000c2e:	f003 f813 	bl	8003c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40011000 	.word	0x40011000
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6193      	str	r3, [r2, #24]
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_MspInit+0x60>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_MspInit+0x60>)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010000 	.word	0x40010000

08000cbc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a28      	ldr	r2, [pc, #160]	@ (8000d78 <HAL_ADC_MspInit+0xbc>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d149      	bne.n	8000d70 <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cdc:	4b27      	ldr	r3, [pc, #156]	@ (8000d7c <HAL_ADC_MspInit+0xc0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a26      	ldr	r2, [pc, #152]	@ (8000d7c <HAL_ADC_MspInit+0xc0>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <HAL_ADC_MspInit+0xc0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <HAL_ADC_MspInit+0xc0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <HAL_ADC_MspInit+0xc0>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <HAL_ADC_MspInit+0xc0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d10:	2303      	movs	r3, #3
 8000d12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4819      	ldr	r0, [pc, #100]	@ (8000d80 <HAL_ADC_MspInit+0xc4>)
 8000d1c:	f002 ff9c 	bl	8003c58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d22:	4a19      	ldr	r2, [pc, #100]	@ (8000d88 <HAL_ADC_MspInit+0xcc>)
 8000d24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d40:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d54:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d56:	f002 fcdd 	bl	8003714 <HAL_DMA_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d60:	f7ff ff74 	bl	8000c4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d68:	621a      	str	r2, [r3, #32]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <HAL_ADC_MspInit+0xc8>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40012400 	.word	0x40012400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	20000258 	.word	0x20000258
 8000d88:	40020008 	.word	0x40020008

08000d8c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a15      	ldr	r2, [pc, #84]	@ (8000dfc <HAL_I2C_MspInit+0x70>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d123      	bne.n	8000df4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a13      	ldr	r2, [pc, #76]	@ (8000e00 <HAL_I2C_MspInit+0x74>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	23c0      	movs	r3, #192	@ 0xc0
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <HAL_I2C_MspInit+0x78>)
 8000dd8:	f002 ff3e 	bl	8003c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <HAL_I2C_MspInit+0x74>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de6:	61d3      	str	r3, [r2, #28]
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e18:	d113      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	201c      	movs	r0, #28
 8000e38:	f002 fc35 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e3c:	201c      	movs	r0, #28
 8000e3e:	f002 fc4e 	bl	80036de <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_TIM_Encoder_MspInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	4a13      	ldr	r2, [pc, #76]	@ (8000ec4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	61d3      	str	r3, [r2, #28]
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea0:	23c0      	movs	r3, #192	@ 0xc0
 8000ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <HAL_TIM_Encoder_MspInit+0x78>)
 8000eb4:	f002 fed0 	bl	8003c58 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40000400 	.word	0x40000400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010800 	.word	0x40010800

08000ecc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a20      	ldr	r2, [pc, #128]	@ (8000f68 <HAL_UART_MspInit+0x9c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d139      	bne.n	8000f60 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480f      	ldr	r0, [pc, #60]	@ (8000f70 <HAL_UART_MspInit+0xa4>)
 8000f32:	f002 fe91 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <HAL_UART_MspInit+0xa4>)
 8000f4c:	f002 fe84 	bl	8003c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2025      	movs	r0, #37	@ 0x25
 8000f56:	f002 fba6 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5a:	2025      	movs	r0, #37	@ 0x25
 8000f5c:	f002 fbbf 	bl	80036de <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f001 fe8c 	bl	8002ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <DMA1_Channel1_IRQHandler+0x10>)
 8000fd2:	f002 fd0d 	bl	80039f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000258 	.word	0x20000258

08000fe0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <TIM2_IRQHandler+0x10>)
 8000fe6:	f004 fb07 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002f0 	.word	0x200002f0

08000ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <USART1_IRQHandler+0x10>)
 8000ffa:	f004 ff71 	bl	8005ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000380 	.word	0x20000380

08001008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	4608      	mov	r0, r1
 800101e:	4611      	mov	r1, r2
 8001020:	461a      	mov	r2, r3
 8001022:	4603      	mov	r3, r0
 8001024:	70fb      	strb	r3, [r7, #3]
 8001026:	460b      	mov	r3, r1
 8001028:	70bb      	strb	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001034:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	787b      	ldrb	r3, [r7, #1]
 8001048:	4413      	add	r3, r2
 800104a:	b2d8      	uxtb	r0, r3
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	3301      	adds	r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	78ba      	ldrb	r2, [r7, #2]
 8001054:	78f9      	ldrb	r1, [r7, #3]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	4603      	mov	r3, r0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 ffea 	bl	8002034 <u8g2_IsIntersection>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d040      	beq.n	80010e8 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 800106a:	e035      	b.n	80010d8 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4013      	ands	r3, r2
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00c      	beq.n	8001094 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7bba      	ldrb	r2, [r7, #14]
 800107e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001082:	78ba      	ldrb	r2, [r7, #2]
 8001084:	78f9      	ldrb	r1, [r7, #3]
 8001086:	2300      	movs	r3, #0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 ff1b 	bl	8001ec8 <u8g2_DrawHVLine>
 8001092:	e010      	b.n	80010b6 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10b      	bne.n	80010b6 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7b7a      	ldrb	r2, [r7, #13]
 80010a2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80010a6:	78ba      	ldrb	r2, [r7, #2]
 80010a8:	78f9      	ldrb	r1, [r7, #3]
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 ff09 	bl	8001ec8 <u8g2_DrawHVLine>
    }
    x++;
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	3301      	adds	r3, #1
 80010ba:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d104      	bne.n	80010d2 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
      b++;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	3301      	adds	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
    }
    len--;
 80010d2:	787b      	ldrb	r3, [r7, #1]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1c6      	bne.n	800106c <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7bba      	ldrb	r2, [r7, #14]
 80010e2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 80010e6:	e000      	b.n	80010ea <u8g2_DrawHXBM+0xd6>
    return;
 80010e8:	bf00      	nop
}
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	4603      	mov	r3, r0
 8001100:	70fb      	strb	r3, [r7, #3]
 8001102:	460b      	mov	r3, r1
 8001104:	70bb      	strb	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 800110a:	787b      	ldrb	r3, [r7, #1]
 800110c:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	3307      	adds	r3, #7
 8001112:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800111a:	78fa      	ldrb	r2, [r7, #3]
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	4413      	add	r3, r2
 8001120:	b2d8      	uxtb	r0, r3
 8001122:	78ba      	ldrb	r2, [r7, #2]
 8001124:	7e3b      	ldrb	r3, [r7, #24]
 8001126:	4413      	add	r3, r2
 8001128:	b2db      	uxtb	r3, r3
 800112a:	78ba      	ldrb	r2, [r7, #2]
 800112c:	78f9      	ldrb	r1, [r7, #3]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4603      	mov	r3, r0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 ff7e 	bl	8002034 <u8g2_IsIntersection>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d017      	beq.n	800116e <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800113e:	e012      	b.n	8001166 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001140:	7878      	ldrb	r0, [r7, #1]
 8001142:	78ba      	ldrb	r2, [r7, #2]
 8001144:	78f9      	ldrb	r1, [r7, #3]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	4603      	mov	r3, r0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff61 	bl	8001014 <u8g2_DrawHXBM>
    bitmap += blen;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	4413      	add	r3, r2
 8001158:	61fb      	str	r3, [r7, #28]
    y++;
 800115a:	78bb      	ldrb	r3, [r7, #2]
 800115c:	3301      	adds	r3, #1
 800115e:	70bb      	strb	r3, [r7, #2]
    h--;
 8001160:	7e3b      	ldrb	r3, [r7, #24]
 8001162:	3b01      	subs	r3, #1
 8001164:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 8001166:	7e3b      	ldrb	r3, [r7, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e9      	bne.n	8001140 <u8g2_DrawXBM+0x50>
 800116c:	e000      	b.n	8001170 <u8g2_DrawXBM+0x80>
    return;
 800116e:	bf00      	nop
  }
}
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	7c1b      	ldrb	r3, [r3, #16]
 8001184:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800118c:	461a      	mov	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	fb02 f303 	mul.w	r3, r2, r3
 8001194:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 fc05 	bl	80069b4 <memset>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af02      	add	r7, sp, #8
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70fb      	strb	r3, [r7, #3]
 80011be:	4613      	mov	r3, r2
 80011c0:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	7c1b      	ldrb	r3, [r3, #16]
 80011c8:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	89ba      	ldrh	r2, [r7, #12]
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80011e0:	89bb      	ldrh	r3, [r7, #12]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80011e6:	89bb      	ldrh	r3, [r7, #12]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80011ee:	7bf9      	ldrb	r1, [r7, #15]
 80011f0:	78ba      	ldrb	r2, [r7, #2]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	460b      	mov	r3, r1
 80011f8:	2100      	movs	r1, #0
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f001 fc32 	bl	8002a64 <u8x8_DrawTile>
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800121a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001222:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	7c5b      	ldrb	r3, [r3, #17]
 800122a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800122c:	7bba      	ldrb	r2, [r7, #14]
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffbd 	bl	80011b2 <u8g2_send_tile_row>
    src_row++;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	3301      	adds	r3, #1
 8001242:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	7b7b      	ldrb	r3, [r7, #13]
 8001248:	429a      	cmp	r2, r3
 800124a:	d203      	bcs.n	8001254 <u8g2_send_buffer+0x4c>
 800124c:	7bba      	ldrb	r2, [r7, #14]
 800124e:	7b3b      	ldrb	r3, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3eb      	bcc.n	800122c <u8g2_send_buffer+0x24>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffcf 	bl	8001208 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f001 fc4b 	bl	8002b06 <u8x8_RefreshDisplay>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2208      	movs	r2, #8
 8001284:	701a      	strb	r2, [r3, #0]
  return buf;
 8001286:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000057c 	.word	0x2000057c

08001298 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af02      	add	r7, sp, #8
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 80012ae:	490c      	ldr	r1, [pc, #48]	@ (80012e0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f001 fc8b 	bl	8002bcc <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80012b6:	f107 0313 	add.w	r3, r7, #19
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ffdc 	bl	8001278 <u8g2_m_16_8_f>
 80012c0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80012c2:	7cfa      	ldrb	r2, [r7, #19]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 80012ca:	6979      	ldr	r1, [r7, #20]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 ff99 	bl	8002204 <u8g2_SetupBuffer>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	08002705 	.word	0x08002705
 80012e0:	08002961 	.word	0x08002961
 80012e4:	0800208b 	.word	0x0800208b

080012e8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	81fb      	strh	r3, [r7, #14]
    font++;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	4413      	add	r3, r2
 800133a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800133c:	89fb      	ldrh	r3, [r7, #14]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001352:	2100      	movs	r1, #0
 8001354:	6838      	ldr	r0, [r7, #0]
 8001356:	f7ff ffc7 	bl	80012e8 <u8g2_font_get_byte>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001362:	2101      	movs	r1, #1
 8001364:	6838      	ldr	r0, [r7, #0]
 8001366:	f7ff ffbf 	bl	80012e8 <u8g2_font_get_byte>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001372:	2102      	movs	r1, #2
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	f7ff ffb7 	bl	80012e8 <u8g2_font_get_byte>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001382:	2103      	movs	r1, #3
 8001384:	6838      	ldr	r0, [r7, #0]
 8001386:	f7ff ffaf 	bl	80012e8 <u8g2_font_get_byte>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001392:	2104      	movs	r1, #4
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f7ff ffa7 	bl	80012e8 <u8g2_font_get_byte>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80013a2:	2105      	movs	r1, #5
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f7ff ff9f 	bl	80012e8 <u8g2_font_get_byte>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80013b2:	2106      	movs	r1, #6
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f7ff ff97 	bl	80012e8 <u8g2_font_get_byte>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80013c2:	2107      	movs	r1, #7
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f7ff ff8f 	bl	80012e8 <u8g2_font_get_byte>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80013d2:	2108      	movs	r1, #8
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f7ff ff87 	bl	80012e8 <u8g2_font_get_byte>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80013e2:	2109      	movs	r1, #9
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f7ff ff7f 	bl	80012e8 <u8g2_font_get_byte>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80013f2:	210a      	movs	r1, #10
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f7ff ff77 	bl	80012e8 <u8g2_font_get_byte>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001402:	210b      	movs	r1, #11
 8001404:	6838      	ldr	r0, [r7, #0]
 8001406:	f7ff ff6f 	bl	80012e8 <u8g2_font_get_byte>
 800140a:	4603      	mov	r3, r0
 800140c:	b25a      	sxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001412:	210c      	movs	r1, #12
 8001414:	6838      	ldr	r0, [r7, #0]
 8001416:	f7ff ff67 	bl	80012e8 <u8g2_font_get_byte>
 800141a:	4603      	mov	r3, r0
 800141c:	b25a      	sxtb	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001422:	210d      	movs	r1, #13
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f7ff ff5f 	bl	80012e8 <u8g2_font_get_byte>
 800142a:	4603      	mov	r3, r0
 800142c:	b25a      	sxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001432:	210e      	movs	r1, #14
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f7ff ff57 	bl	80012e8 <u8g2_font_get_byte>
 800143a:	4603      	mov	r3, r0
 800143c:	b25a      	sxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001442:	210f      	movs	r1, #15
 8001444:	6838      	ldr	r0, [r7, #0]
 8001446:	f7ff ff4f 	bl	80012e8 <u8g2_font_get_byte>
 800144a:	4603      	mov	r3, r0
 800144c:	b25a      	sxtb	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001452:	2110      	movs	r1, #16
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f7ff ff47 	bl	80012e8 <u8g2_font_get_byte>
 800145a:	4603      	mov	r3, r0
 800145c:	b25a      	sxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001462:	2111      	movs	r1, #17
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f7ff ff50 	bl	800130a <u8g2_font_get_word>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001472:	2113      	movs	r1, #19
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f7ff ff48 	bl	800130a <u8g2_font_get_word>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001482:	2115      	movs	r1, #21
 8001484:	6838      	ldr	r0, [r7, #0]
 8001486:	f7ff ff40 	bl	800130a <u8g2_font_get_word>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	82da      	strh	r2, [r3, #22]
#endif
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7a9b      	ldrb	r3, [r3, #10]
 80014aa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	7b7b      	ldrb	r3, [r7, #13]
 80014b8:	fa42 f303 	asr.w	r3, r2, r3
 80014bc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80014be:	7b7b      	ldrb	r3, [r7, #13]
 80014c0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80014c2:	7bba      	ldrb	r2, [r7, #14]
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	4413      	add	r3, r2
 80014c8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	d91a      	bls.n	8001506 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80014d0:	2308      	movs	r3, #8
 80014d2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80014d4:	7b3a      	ldrb	r2, [r7, #12]
 80014d6:	7b7b      	ldrb	r3, [r7, #13]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	3b08      	subs	r3, #8
 8001504:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	b2da      	uxtb	r2, r3
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	4013      	ands	r3, r2
 800151a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7bba      	ldrb	r2, [r7, #14]
 8001520:	729a      	strb	r2, [r3, #10]
  return val;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	4619      	mov	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffab 	bl	800149a <u8g2_font_decode_get_unsigned_bits>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001548:	2301      	movs	r3, #1
 800154a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	3b01      	subs	r3, #1
 8001550:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001552:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	73fb      	strb	r3, [r7, #15]
  return v;
 8001568:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001574:	b490      	push	{r4, r7}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4623      	mov	r3, r4
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	4603      	mov	r3, r0
 8001588:	71bb      	strb	r3, [r7, #6]
 800158a:	460b      	mov	r3, r1
 800158c:	717b      	strb	r3, [r7, #5]
 800158e:	4613      	mov	r3, r2
 8001590:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001592:	793b      	ldrb	r3, [r7, #4]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d010      	beq.n	80015ba <u8g2_add_vector_y+0x46>
 8001598:	2b02      	cmp	r3, #2
 800159a:	dc13      	bgt.n	80015c4 <u8g2_add_vector_y+0x50>
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <u8g2_add_vector_y+0x32>
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d005      	beq.n	80015b0 <u8g2_add_vector_y+0x3c>
 80015a4:	e00e      	b.n	80015c4 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80015a6:	797a      	ldrb	r2, [r7, #5]
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	4413      	add	r3, r2
 80015ac:	71fb      	strb	r3, [r7, #7]
      break;
 80015ae:	e00e      	b.n	80015ce <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80015b0:	79ba      	ldrb	r2, [r7, #6]
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	4413      	add	r3, r2
 80015b6:	71fb      	strb	r3, [r7, #7]
      break;
 80015b8:	e009      	b.n	80015ce <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	71fb      	strb	r3, [r7, #7]
      break;
 80015c2:	e004      	b.n	80015ce <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	71fb      	strb	r3, [r7, #7]
      break;      
 80015cc:	bf00      	nop
  }
  return dy;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc90      	pop	{r4, r7}
 80015d8:	4770      	bx	lr

080015da <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80015da:	b490      	push	{r4, r7}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4604      	mov	r4, r0
 80015e2:	4608      	mov	r0, r1
 80015e4:	4611      	mov	r1, r2
 80015e6:	461a      	mov	r2, r3
 80015e8:	4623      	mov	r3, r4
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4603      	mov	r3, r0
 80015ee:	71bb      	strb	r3, [r7, #6]
 80015f0:	460b      	mov	r3, r1
 80015f2:	717b      	strb	r3, [r7, #5]
 80015f4:	4613      	mov	r3, r2
 80015f6:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80015f8:	793b      	ldrb	r3, [r7, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d010      	beq.n	8001620 <u8g2_add_vector_x+0x46>
 80015fe:	2b02      	cmp	r3, #2
 8001600:	dc13      	bgt.n	800162a <u8g2_add_vector_x+0x50>
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <u8g2_add_vector_x+0x32>
 8001606:	2b01      	cmp	r3, #1
 8001608:	d005      	beq.n	8001616 <u8g2_add_vector_x+0x3c>
 800160a:	e00e      	b.n	800162a <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 800160c:	79ba      	ldrb	r2, [r7, #6]
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4413      	add	r3, r2
 8001612:	71fb      	strb	r3, [r7, #7]
      break;
 8001614:	e00e      	b.n	8001634 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8001616:	797b      	ldrb	r3, [r7, #5]
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	71fb      	strb	r3, [r7, #7]
      break;
 800161e:	e009      	b.n	8001634 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	71fb      	strb	r3, [r7, #7]
      break;
 8001628:	e004      	b.n	8001634 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 800162a:	797a      	ldrb	r2, [r7, #5]
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4413      	add	r3, r2
 8001630:	71fb      	strb	r3, [r7, #7]
      break;      
 8001632:	bf00      	nop
  }
  return dx;
 8001634:	79fb      	ldrb	r3, [r7, #7]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bc90      	pop	{r4, r7}
 800163e:	4770      	bx	lr

08001640 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
 800164c:	4613      	mov	r3, r2
 800164e:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3358      	adds	r3, #88	@ 0x58
 8001654:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001660:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001668:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001670:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	7d7b      	ldrb	r3, [r7, #21]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800167e:	7dfa      	ldrb	r2, [r7, #23]
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	429a      	cmp	r2, r3
 8001684:	d201      	bcs.n	800168a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	791b      	ldrb	r3, [r3, #4]
 800168e:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	795b      	ldrb	r3, [r3, #5]
 8001694:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001696:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800169a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	7b9b      	ldrb	r3, [r3, #14]
 80016a2:	7bb8      	ldrb	r0, [r7, #14]
 80016a4:	f7ff ff99 	bl	80015da <u8g2_add_vector_x>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80016ac:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80016b0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	7b9b      	ldrb	r3, [r3, #14]
 80016b8:	7b78      	ldrb	r0, [r7, #13]
 80016ba:	f7ff ff5b 	bl	8001574 <u8g2_add_vector_y>
 80016be:	4603      	mov	r3, r0
 80016c0:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80016c2:	78bb      	ldrb	r3, [r7, #2]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00f      	beq.n	80016e8 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	7b1a      	ldrb	r2, [r3, #12]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
      u8g2_DrawHVLine(u8g2, 
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	7b9b      	ldrb	r3, [r3, #14]
 80016d6:	7db8      	ldrb	r0, [r7, #22]
 80016d8:	7b7a      	ldrb	r2, [r7, #13]
 80016da:	7bb9      	ldrb	r1, [r7, #14]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4603      	mov	r3, r0
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fbf1 	bl	8001ec8 <u8g2_DrawHVLine>
 80016e6:	e012      	b.n	800170e <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	7adb      	ldrb	r3, [r3, #11]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10e      	bne.n	800170e <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	7b5a      	ldrb	r2, [r3, #13]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
      u8g2_DrawHVLine(u8g2, 
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	7b9b      	ldrb	r3, [r3, #14]
 80016fe:	7db8      	ldrb	r0, [r7, #22]
 8001700:	7b7a      	ldrb	r2, [r7, #13]
 8001702:	7bb9      	ldrb	r1, [r7, #14]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	4603      	mov	r3, r0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fbdd 	bl	8001ec8 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800170e:	7dfa      	ldrb	r2, [r7, #23]
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	429a      	cmp	r2, r3
 8001714:	d309      	bcc.n	800172a <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001716:	7dfa      	ldrb	r2, [r7, #23]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	757b      	strb	r3, [r7, #21]
    ly++;
 8001722:	7d3b      	ldrb	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001728:	e79f      	b.n	800166a <u8g2_font_decode_len+0x2a>
      break;
 800172a:	bf00      	nop
  }
  lx += cnt;
 800172c:	7d7a      	ldrb	r2, [r7, #21]
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	4413      	add	r3, r2
 8001732:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001734:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 800173c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	71da      	strb	r2, [r3, #7]
  
}
 8001744:	bf00      	nop
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3358      	adds	r3, #88	@ 0x58
 800175a:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800176e:	4619      	mov	r1, r3
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff fe92 	bl	800149a <u8g2_font_decode_get_unsigned_bits>
 8001776:	4603      	mov	r3, r0
 8001778:	b25a      	sxtb	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8001784:	4619      	mov	r1, r3
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff fe87 	bl	800149a <u8g2_font_decode_get_unsigned_bits>
 800178c:	4603      	mov	r3, r0
 800178e:	b25a      	sxtb	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 2086 	ldrb.w	r2, [r3, #134]	@ 0x86
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	7b1b      	ldrb	r3, [r3, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	735a      	strb	r2, [r3, #13]
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3358      	adds	r3, #88	@ 0x58
 80017ca:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffbc 	bl	800174c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017da:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80017e2:	4619      	mov	r1, r3
 80017e4:	6938      	ldr	r0, [r7, #16]
 80017e6:	f7ff fea2 	bl	800152e <u8g2_font_decode_get_signed_bits>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 80017f4:	4619      	mov	r1, r3
 80017f6:	6938      	ldr	r0, [r7, #16]
 80017f8:	f7ff fe99 	bl	800152e <u8g2_font_decode_get_signed_bits>
 80017fc:	4603      	mov	r3, r0
 80017fe:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001806:	4619      	mov	r1, r3
 8001808:	6938      	ldr	r0, [r7, #16]
 800180a:	f7ff fe90 	bl	800152e <u8g2_font_decode_get_signed_bits>
 800180e:	4603      	mov	r3, r0
 8001810:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f340 80cf 	ble.w	80019bc <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	7918      	ldrb	r0, [r3, #4]
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	7b7b      	ldrb	r3, [r7, #13]
 8001826:	4413      	add	r3, r2
 8001828:	b2db      	uxtb	r3, r3
 800182a:	425b      	negs	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	b25a      	sxtb	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	7b9b      	ldrb	r3, [r3, #14]
 8001834:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001838:	f7ff fecf 	bl	80015da <u8g2_add_vector_x>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	7958      	ldrb	r0, [r3, #5]
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	7b7b      	ldrb	r3, [r7, #13]
 800184c:	4413      	add	r3, r2
 800184e:	b2db      	uxtb	r3, r3
 8001850:	425b      	negs	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	b25a      	sxtb	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	7b9b      	ldrb	r3, [r3, #14]
 800185a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800185e:	f7ff fe89 	bl	8001574 <u8g2_add_vector_y>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	791b      	ldrb	r3, [r3, #4]
 800186e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	795b      	ldrb	r3, [r3, #5]
 8001874:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 800187a:	7d7b      	ldrb	r3, [r7, #21]
 800187c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	7b9b      	ldrb	r3, [r3, #14]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d852      	bhi.n	800192c <u8g2_font_decode_glyph+0x170>
 8001886:	a201      	add	r2, pc, #4	@ (adr r2, 800188c <u8g2_font_decode_glyph+0xd0>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	0800189d 	.word	0x0800189d
 8001890:	080018b5 	.word	0x080018b5
 8001894:	080018d9 	.word	0x080018d9
 8001898:	08001909 	.word	0x08001909
      {
	case 0:
	    x1 += decode->glyph_width;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	7dbb      	ldrb	r3, [r7, #22]
 80018a6:	4413      	add	r3, r2
 80018a8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	7d3b      	ldrb	r3, [r7, #20]
 80018ae:	4413      	add	r3, r2
 80018b0:	753b      	strb	r3, [r7, #20]
	    break;
 80018b2:	e03b      	b.n	800192c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	7dfa      	ldrb	r2, [r7, #23]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	3301      	adds	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80018c2:	7dbb      	ldrb	r3, [r7, #22]
 80018c4:	3301      	adds	r3, #1
 80018c6:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	7d3b      	ldrb	r3, [r7, #20]
 80018d2:	4413      	add	r3, r2
 80018d4:	753b      	strb	r3, [r7, #20]
	    break;
 80018d6:	e029      	b.n	800192c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	7dfa      	ldrb	r2, [r7, #23]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	3301      	adds	r3, #1
 80018ea:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80018ec:	7dbb      	ldrb	r3, [r7, #22]
 80018ee:	3301      	adds	r3, #1
 80018f0:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	7d7a      	ldrb	r2, [r7, #21]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80018fa:	7d7b      	ldrb	r3, [r7, #21]
 80018fc:	3301      	adds	r3, #1
 80018fe:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001900:	7d3b      	ldrb	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001906:	e011      	b.n	800192c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	4413      	add	r3, r2
 800190e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	7d7a      	ldrb	r2, [r7, #21]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800191e:	7d7b      	ldrb	r3, [r7, #21]
 8001920:	3301      	adds	r3, #1
 8001922:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001924:	7d3b      	ldrb	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	753b      	strb	r3, [r7, #20]
	    break;	  
 800192a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800192c:	7db8      	ldrb	r0, [r7, #22]
 800192e:	7d7a      	ldrb	r2, [r7, #21]
 8001930:	7df9      	ldrb	r1, [r7, #23]
 8001932:	7d3b      	ldrb	r3, [r7, #20]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	4603      	mov	r3, r0
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fb7b 	bl	8002034 <u8g2_IsIntersection>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <u8g2_font_decode_glyph+0x18e>
	return d;
 8001944:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001948:	e03a      	b.n	80019c0 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2200      	movs	r2, #0
 800194e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2200      	movs	r2, #0
 8001954:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800195c:	4619      	mov	r1, r3
 800195e:	6938      	ldr	r0, [r7, #16]
 8001960:	f7ff fd9b 	bl	800149a <u8g2_font_decode_get_unsigned_bits>
 8001964:	4603      	mov	r3, r0
 8001966:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800196e:	4619      	mov	r1, r3
 8001970:	6938      	ldr	r0, [r7, #16]
 8001972:	f7ff fd92 	bl	800149a <u8g2_font_decode_get_unsigned_bits>
 8001976:	4603      	mov	r3, r0
 8001978:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fe5d 	bl	8001640 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001986:	7abb      	ldrb	r3, [r7, #10]
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fe57 	bl	8001640 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001992:	2101      	movs	r1, #1
 8001994:	6938      	ldr	r0, [r7, #16]
 8001996:	f7ff fd80 	bl	800149a <u8g2_font_decode_get_unsigned_bits>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ec      	bne.n	800197a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80019a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd00      	ble.n	80019b0 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80019ae:	e7d2      	b.n	8001956 <u8g2_font_decode_glyph+0x19a>
	break;
 80019b0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	7b1a      	ldrb	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
  }
  return d;
 80019bc:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3317      	adds	r3, #23
 80019de:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	2bff      	cmp	r3, #255	@ 0xff
 80019e4:	d82a      	bhi.n	8001a3c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	2b60      	cmp	r3, #96	@ 0x60
 80019ea:	d907      	bls.n	80019fc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80019f2:	461a      	mov	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	4413      	add	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e009      	b.n	8001a10 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	2b40      	cmp	r3, #64	@ 0x40
 8001a00:	d906      	bls.n	8001a10 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 8001a08:	461a      	mov	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d04e      	beq.n	8001ab8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d102      	bne.n	8001a2c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	e049      	b.n	8001ac0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	4413      	add	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001a3a:	e7e9      	b.n	8001a10 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8001a42:	461a      	mov	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4413      	add	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	6938      	ldr	r0, [r7, #16]
 8001a52:	f7ff fc5a 	bl	800130a <u8g2_font_get_word>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001a60:	2102      	movs	r1, #2
 8001a62:	6938      	ldr	r0, [r7, #16]
 8001a64:	f7ff fc51 	bl	800130a <u8g2_font_get_word>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001a72:	89fa      	ldrh	r2, [r7, #14]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d3e9      	bcc.n	8001a4e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d010      	beq.n	8001abc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001a9a:	89fa      	ldrh	r2, [r7, #14]
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d102      	bne.n	8001aa8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	e00b      	b.n	8001ac0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3302      	adds	r3, #2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001ab6:	e7e0      	b.n	8001a7a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001ab8:	bf00      	nop
 8001aba:	e000      	b.n	8001abe <u8g2_font_get_glyph_data+0xf6>
	break;
 8001abc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	70fb      	strb	r3, [r7, #3]
 8001ada:	460b      	mov	r3, r1
 8001adc:	70bb      	strb	r3, [r7, #2]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  u8g2->font_decode.target_y = y;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	78ba      	ldrb	r2, [r7, #2]
 8001af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001af6:	883b      	ldrh	r3, [r7, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff64 	bl	80019c8 <u8g2_font_get_glyph_data>
 8001b00:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fe56 	bl	80017bc <u8g2_font_decode_glyph>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	70fb      	strb	r3, [r7, #3]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70bb      	strb	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d833      	bhi.n	8001bac <u8g2_DrawGlyph+0x8c>
 8001b44:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <u8g2_DrawGlyph+0x2c>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b71 	.word	0x08001b71
 8001b54:	08001b85 	.word	0x08001b85
 8001b58:	08001b99 	.word	0x08001b99
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	78bb      	ldrb	r3, [r7, #2]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	70bb      	strb	r3, [r7, #2]
      break;
 8001b6e:	e01d      	b.n	8001bac <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	70fb      	strb	r3, [r7, #3]
      break;
 8001b82:	e013      	b.n	8001bac <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	78bb      	ldrb	r3, [r7, #2]
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	70bb      	strb	r3, [r7, #2]
      break;
 8001b96:	e009      	b.n	8001bac <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	70fb      	strb	r3, [r7, #3]
      break;
 8001baa:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001bac:	883b      	ldrh	r3, [r7, #0]
 8001bae:	78ba      	ldrb	r2, [r7, #2]
 8001bb0:	78f9      	ldrb	r1, [r7, #3]
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff88 	bl	8001ac8 <u8g2_font_draw_glyph>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop

08001bc4 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	72fb      	strb	r3, [r7, #11]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fc67 	bl	80024aa <u8x8_utf8_init>
  sum = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	4611      	mov	r1, r2
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	4798      	blx	r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001bf2:	8abb      	ldrh	r3, [r7, #20]
 8001bf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d038      	beq.n	8001c6e <u8g2_draw_string+0xaa>
      break;
    str++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001c02:	8abb      	ldrh	r3, [r7, #20]
 8001c04:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d0e9      	beq.n	8001be0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001c0c:	8abb      	ldrh	r3, [r7, #20]
 8001c0e:	7aba      	ldrb	r2, [r7, #10]
 8001c10:	7af9      	ldrb	r1, [r7, #11]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff ff84 	bl	8001b20 <u8g2_DrawGlyph>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d81e      	bhi.n	8001c64 <u8g2_draw_string+0xa0>
 8001c26:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <u8g2_draw_string+0x68>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c47 	.word	0x08001c47
 8001c34:	08001c51 	.word	0x08001c51
 8001c38:	08001c5b 	.word	0x08001c5b
      {
	case 0:
	  x += delta;
 8001c3c:	7afa      	ldrb	r2, [r7, #11]
 8001c3e:	7cfb      	ldrb	r3, [r7, #19]
 8001c40:	4413      	add	r3, r2
 8001c42:	72fb      	strb	r3, [r7, #11]
	  break;
 8001c44:	e00e      	b.n	8001c64 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001c46:	7aba      	ldrb	r2, [r7, #10]
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	72bb      	strb	r3, [r7, #10]
	  break;
 8001c4e:	e009      	b.n	8001c64 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001c50:	7afa      	ldrb	r2, [r7, #11]
 8001c52:	7cfb      	ldrb	r3, [r7, #19]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	72fb      	strb	r3, [r7, #11]
	  break;
 8001c58:	e004      	b.n	8001c64 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001c5a:	7aba      	ldrb	r2, [r7, #10]
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	72bb      	strb	r3, [r7, #10]
	  break;
 8001c62:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8001c64:	7dfa      	ldrb	r2, [r7, #23]
 8001c66:	7cfb      	ldrb	r3, [r7, #19]
 8001c68:	4413      	add	r3, r2
 8001c6a:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001c6c:	e7b8      	b.n	8001be0 <u8g2_draw_string+0x1c>
      break;
 8001c6e:	bf00      	nop
    }
  }
  return sum;
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop

08001c7c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	72fb      	strb	r3, [r7, #11]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <u8g2_DrawStr+0x30>)
 8001c92:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001c94:	7aba      	ldrb	r2, [r7, #10]
 8001c96:	7af9      	ldrb	r1, [r7, #11]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff ff92 	bl	8001bc4 <u8g2_draw_string>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	080024c5 	.word	0x080024c5

08001cb0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d05d      	beq.n	8001d7c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f993 2075 	ldrsb.w	r2, [r3, #117]	@ 0x75
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f993 2076 	ldrsb.w	r2, [r3, #118]	@ 0x76
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d04d      	beq.n	8001d7e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d11c      	bne.n	8001d26 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f993 3077 	ldrsb.w	r3, [r3, #119]	@ 0x77
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	da05      	bge.n	8001d08 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f993 2077 	ldrsb.w	r2, [r3, #119]	@ 0x77
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f993 3078 	ldrsb.w	r3, [r3, #120]	@ 0x78
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dd32      	ble.n	8001d7e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f993 2078 	ldrsb.w	r2, [r3, #120]	@ 0x78
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 8001d24:	e02b      	b.n	8001d7e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f993 3072 	ldrsb.w	r3, [r3, #114]	@ 0x72
 8001d34:	4619      	mov	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 8001d3c:	440b      	add	r3, r1
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	da0d      	bge.n	8001d5e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f993 3072 	ldrsb.w	r3, [r3, #114]	@ 0x72
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dd07      	ble.n	8001d7e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f993 2074 	ldrsb.w	r2, [r3, #116]	@ 0x74
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 8001d7a:	e000      	b.n	8001d7e <u8g2_UpdateRefHeight+0xce>
    return;
 8001d7c:	bf00      	nop
  }  
}
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  return 0;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
	...

08001d9c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a03      	ldr	r2, [pc, #12]	@ (8001db4 <u8g2_SetFontPosBaseline+0x18>)
 8001da8:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	08001d87 	.word	0x08001d87

08001db8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d00b      	beq.n	8001de4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	651a      	str	r2, [r3, #80]	@ 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3368      	adds	r3, #104	@ 0x68
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fab5 	bl	8001348 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ff66 	bl	8001cb0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	7dbb      	ldrb	r3, [r7, #22]
 8001e12:	4413      	add	r3, r2
 8001e14:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001e16:	7dfa      	ldrb	r2, [r7, #23]
 8001e18:	7dbb      	ldrb	r3, [r7, #22]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d90b      	bls.n	8001e36 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001e1e:	7dfa      	ldrb	r2, [r7, #23]
 8001e20:	79bb      	ldrb	r3, [r7, #6]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d205      	bcs.n	8001e32 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001e26:	79bb      	ldrb	r3, [r7, #6]
 8001e28:	75bb      	strb	r3, [r7, #22]
      b--;
 8001e2a:	7dbb      	ldrb	r3, [r7, #22]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	75bb      	strb	r3, [r7, #22]
 8001e30:	e001      	b.n	8001e36 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001e36:	7dfa      	ldrb	r2, [r7, #23]
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d301      	bcc.n	8001e42 <u8g2_clip_intersection2+0x56>
    return 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e01c      	b.n	8001e7c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001e42:	7dba      	ldrb	r2, [r7, #22]
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d801      	bhi.n	8001e4e <u8g2_clip_intersection2+0x62>
    return 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e016      	b.n	8001e7c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001e4e:	7dfa      	ldrb	r2, [r7, #23]
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d201      	bcs.n	8001e5a <u8g2_clip_intersection2+0x6e>
    a = c;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8001e5a:	7dba      	ldrb	r2, [r7, #22]
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d901      	bls.n	8001e66 <u8g2_clip_intersection2+0x7a>
    b = d;
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	7dfa      	ldrb	r2, [r7, #23]
 8001e6a:	701a      	strb	r2, [r3, #0]
  b -= a;
 8001e6c:	7dba      	ldrb	r2, [r7, #22]
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	7dba      	ldrb	r2, [r7, #22]
 8001e78:	701a      	strb	r2, [r3, #0]
  return 1;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001e86:	b590      	push	{r4, r7, lr}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af02      	add	r7, sp, #8
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	4608      	mov	r0, r1
 8001e90:	4611      	mov	r1, r2
 8001e92:	461a      	mov	r2, r3
 8001e94:	4603      	mov	r3, r0
 8001e96:	70fb      	strb	r3, [r7, #3]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70bb      	strb	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ea6:	78ba      	ldrb	r2, [r7, #2]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001eb0:	7878      	ldrb	r0, [r7, #1]
 8001eb2:	78ba      	ldrb	r2, [r7, #2]
 8001eb4:	78f9      	ldrb	r1, [r7, #3]
 8001eb6:	7e3b      	ldrb	r3, [r7, #24]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	47a0      	blx	r4
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd90      	pop	{r4, r7, pc}

08001ec8 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	70fb      	strb	r3, [r7, #3]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70bb      	strb	r3, [r7, #2]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d06d      	beq.n	8001fc8 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d06a      	beq.n	8001fc8 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001ef2:	787b      	ldrb	r3, [r7, #1]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d918      	bls.n	8001f2a <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8001ef8:	7e3b      	ldrb	r3, [r7, #24]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d109      	bne.n	8001f12 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	70fb      	strb	r3, [r7, #3]
	  x++;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	70fb      	strb	r3, [r7, #3]
 8001f10:	e00b      	b.n	8001f2a <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8001f12:	7e3b      	ldrb	r3, [r7, #24]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d108      	bne.n	8001f2a <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8001f18:	78ba      	ldrb	r2, [r7, #2]
 8001f1a:	787b      	ldrb	r3, [r7, #1]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	70bb      	strb	r3, [r7, #2]
	  y++;
 8001f22:	78bb      	ldrb	r3, [r7, #2]
 8001f24:	3301      	adds	r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8001f2a:	7e3b      	ldrb	r3, [r7, #24]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001f32:	7e3b      	ldrb	r3, [r7, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d119      	bne.n	8001f6c <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 8001f3e:	78bb      	ldrb	r3, [r7, #2]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d838      	bhi.n	8001fb6 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8001f4a:	78bb      	ldrb	r3, [r7, #2]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d934      	bls.n	8001fba <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001f5c:	1c79      	adds	r1, r7, #1
 8001f5e:	1cf8      	adds	r0, r7, #3
 8001f60:	f7ff ff44 	bl	8001dec <u8g2_clip_intersection2>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d119      	bne.n	8001f9e <u8g2_DrawHVLine+0xd6>
	  return;
 8001f6a:	e02d      	b.n	8001fc8 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d822      	bhi.n	8001fbe <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d91e      	bls.n	8001fc2 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001f90:	1c79      	adds	r1, r7, #1
 8001f92:	1cb8      	adds	r0, r7, #2
 8001f94:	f7ff ff2a 	bl	8001dec <u8g2_clip_intersection2>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d013      	beq.n	8001fc6 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa2:	689c      	ldr	r4, [r3, #8]
 8001fa4:	78f9      	ldrb	r1, [r7, #3]
 8001fa6:	78ba      	ldrb	r2, [r7, #2]
 8001fa8:	7878      	ldrb	r0, [r7, #1]
 8001faa:	7e3b      	ldrb	r3, [r7, #24]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	47a0      	blx	r4
 8001fb4:	e008      	b.n	8001fc8 <u8g2_DrawHVLine+0x100>
	  return;
 8001fb6:	bf00      	nop
 8001fb8:	e006      	b.n	8001fc8 <u8g2_DrawHVLine+0x100>
	  return;
 8001fba:	bf00      	nop
 8001fbc:	e004      	b.n	8001fc8 <u8g2_DrawHVLine+0x100>
	  return;
 8001fbe:	bf00      	nop
 8001fc0:	e002      	b.n	8001fc8 <u8g2_DrawHVLine+0x100>
	  return;
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <u8g2_DrawHVLine+0x100>
	  return;
 8001fc6:	bf00      	nop
    }
}
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}

08001fce <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001fce:	b490      	push	{r4, r7}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	4611      	mov	r1, r2
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4623      	mov	r3, r4
 8001fde:	71fb      	strb	r3, [r7, #7]
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71bb      	strb	r3, [r7, #6]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	717b      	strb	r3, [r7, #5]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8001fec:	797a      	ldrb	r2, [r7, #5]
 8001fee:	79bb      	ldrb	r3, [r7, #6]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d20d      	bcs.n	8002010 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001ff4:	793a      	ldrb	r2, [r7, #4]
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d901      	bls.n	8002000 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e014      	b.n	800202a <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002000:	797a      	ldrb	r2, [r7, #5]
 8002002:	793b      	ldrb	r3, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d901      	bls.n	800200c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002008:	2301      	movs	r3, #1
 800200a:	e00e      	b.n	800202a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800200c:	2300      	movs	r3, #0
 800200e:	e00c      	b.n	800202a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002010:	793a      	ldrb	r2, [r7, #4]
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	429a      	cmp	r2, r3
 8002016:	d907      	bls.n	8002028 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002018:	797a      	ldrb	r2, [r7, #5]
 800201a:	793b      	ldrb	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d901      	bls.n	8002024 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002020:	2301      	movs	r3, #1
 8002022:	e002      	b.n	800202a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002028:	2300      	movs	r3, #0
    }
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bc90      	pop	{r4, r7}
 8002032:	4770      	bx	lr

08002034 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4603      	mov	r3, r0
 8002044:	70fb      	strb	r3, [r7, #3]
 8002046:	460b      	mov	r3, r1
 8002048:	70bb      	strb	r3, [r7, #2]
 800204a:	4613      	mov	r3, r2
 800204c:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 800205a:	7c3b      	ldrb	r3, [r7, #16]
 800205c:	78ba      	ldrb	r2, [r7, #2]
 800205e:	f7ff ffb6 	bl	8001fce <u8g2_is_intersection_decision_tree>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <u8g2_IsIntersection+0x38>
    return 0; 
 8002068:	2300      	movs	r3, #0
 800206a:	e00a      	b.n	8002082 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 0045 	ldrb.w	r0, [r3, #69]	@ 0x45
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 1046 	ldrb.w	r1, [r3, #70]	@ 0x46
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	f7ff ffa7 	bl	8001fce <u8g2_is_intersection_decision_tree>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800208a:	b480      	push	{r7}
 800208c:	b087      	sub	sp, #28
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	4608      	mov	r0, r1
 8002094:	4611      	mov	r1, r2
 8002096:	461a      	mov	r2, r3
 8002098:	4603      	mov	r3, r0
 800209a:	70fb      	strb	r3, [r7, #3]
 800209c:	460b      	mov	r3, r1
 800209e:	70bb      	strb	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80020a4:	78bb      	ldrb	r3, [r7, #2]
 80020a6:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80020b4:	7c3a      	ldrb	r2, [r7, #16]
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d801      	bhi.n	80020d4 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80020d0:	7c3b      	ldrb	r3, [r7, #16]
 80020d2:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80020de:	7c3b      	ldrb	r3, [r7, #16]
 80020e0:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80020e2:	78bb      	ldrb	r3, [r7, #2]
 80020e4:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80020e6:	89fb      	ldrh	r3, [r7, #14]
 80020e8:	f023 0307 	bic.w	r3, r3, #7
 80020ec:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	7c1b      	ldrb	r3, [r3, #16]
 80020f4:	461a      	mov	r2, r3
 80020f6:	89fb      	ldrh	r3, [r7, #14]
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002102:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002104:	89fb      	ldrh	r3, [r7, #14]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4413      	add	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  ptr += x;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8002114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d117      	bne.n	800214c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	7cbb      	ldrb	r3, [r7, #18]
 8002122:	4313      	orrs	r3, r2
 8002124:	b2da      	uxtb	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	7c7b      	ldrb	r3, [r7, #17]
 8002130:	4053      	eors	r3, r2
 8002132:	b2da      	uxtb	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
	len--;
 800213e:	787b      	ldrb	r3, [r7, #1]
 8002140:	3b01      	subs	r3, #1
 8002142:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e8      	bne.n	800211c <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800214a:	e039      	b.n	80021c0 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	7cbb      	ldrb	r3, [r7, #18]
 8002152:	4313      	orrs	r3, r2
 8002154:	b2da      	uxtb	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	7c7b      	ldrb	r3, [r7, #17]
 8002160:	4053      	eors	r3, r2
 8002162:	b2da      	uxtb	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	3301      	adds	r3, #1
 800216c:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	74fb      	strb	r3, [r7, #19]
      len--;
 8002176:	787b      	ldrb	r3, [r7, #1]
 8002178:	3b01      	subs	r3, #1
 800217a:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002188:	461a      	mov	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8002196:	2b01      	cmp	r3, #1
 8002198:	d801      	bhi.n	800219e <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d008      	beq.n	80021ba <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	747b      	strb	r3, [r7, #17]
 80021ac:	e005      	b.n	80021ba <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80021ae:	7cbb      	ldrb	r3, [r7, #18]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80021b4:	7c7b      	ldrb	r3, [r7, #17]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80021ba:	787b      	ldrb	r3, [r7, #1]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1c5      	bne.n	800214c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80021c0:	bf00      	nop
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  u8g2->clip_y0 = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	22ff      	movs	r2, #255	@ 0xff
 80021e6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	22ff      	movs	r2, #255	@ 0xff
 80021ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	651a      	str	r2, [r3, #80]	@ 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  u8g2->tile_buf_ptr = buf;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	639a      	str	r2, [r3, #56]	@ 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	79fa      	ldrb	r2, [r7, #7]
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  u8g2->tile_curr_row = 0;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
  u8g2->bitmap_transparency = 0;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
  
  u8g2->draw_color = 1;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
  u8g2->is_auto_page_clear = 1;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
  
  u8g2->cb = u8g2_cb;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->cb->update_dimension(u8g2);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff ffaf 	bl	80021ca <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7ff fd95 	bl	8001d9c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
#endif
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002296:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  
  t = display_info->tile_width;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	7c1b      	ldrb	r3, [r3, #16]
 80022aa:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b1f      	cmp	r3, #31
 80022b0:	d901      	bls.n	80022b6 <u8g2_update_dimension_common+0x34>
    t = 31;
 80022b2:	231f      	movs	r3, #31
 80022b4:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_curr_row;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ca:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  t = u8g2->tile_buf_height;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e0:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 80022ea:	4413      	add	r3, r2
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	7c52      	ldrb	r2, [r2, #17]
 80022f0:	4293      	cmp	r3, r2
 80022f2:	dd06      	ble.n	8002302 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	7c5a      	ldrb	r2, [r3, #17]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4413      	add	r3, r2
 800232a:	b2da      	uxtb	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	22f0      	movs	r2, #240	@ 0xf0
 8002336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  if ( display_info->pixel_width <= 240 )
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	8a9b      	ldrh	r3, [r3, #20]
 800233e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002340:	d805      	bhi.n	800234e <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	8a9b      	ldrh	r3, [r3, #20]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  u8g2->height = display_info->pixel_height;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	8adb      	ldrh	r3, [r3, #22]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
#endif

}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af02      	add	r7, sp, #8
 800236a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 1049 	ldrb.w	r1, [r3, #73]	@ 0x49
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 004a 	ldrb.w	r0, [r3, #74]	@ 0x4a
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4603      	mov	r3, r0
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fe53 	bl	8002034 <u8g2_IsIntersection>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800239c:	e03b      	b.n	8002416 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d205      	bcs.n	80023c2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d905      	bls.n	80023de <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d205      	bcs.n	80023fa <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002406:	429a      	cmp	r2, r3
 8002408:	d905      	bls.n	8002416 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff2b 	bl	8002282 <u8g2_update_dimension_common>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff7b 	bl	8002364 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af02      	add	r7, sp, #8
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	4608      	mov	r0, r1
 8002480:	4611      	mov	r1, r2
 8002482:	461a      	mov	r2, r3
 8002484:	4603      	mov	r3, r0
 8002486:	70fb      	strb	r3, [r7, #3]
 8002488:	460b      	mov	r3, r1
 800248a:	70bb      	strb	r3, [r7, #2]
 800248c:	4613      	mov	r3, r2
 800248e:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002490:	7878      	ldrb	r0, [r7, #1]
 8002492:	78ba      	ldrb	r2, [r7, #2]
 8002494:	78f9      	ldrb	r1, [r7, #3]
 8002496:	7c3b      	ldrb	r3, [r7, #16]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4603      	mov	r3, r0
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff fcf2 	bl	8001e86 <u8g2_draw_hv_line_2dir>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <u8x8_ascii_next+0x18>
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	2b0a      	cmp	r3, #10
 80024da:	d102      	bne.n	80024e2 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80024dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024e0:	e001      	b.n	80024e6 <u8x8_ascii_next+0x22>
  return b;
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	b29b      	uxth	r3, r3
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	460b      	mov	r3, r1
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691c      	ldr	r4, [r3, #16]
 8002502:	7afa      	ldrb	r2, [r7, #11]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2117      	movs	r1, #23
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	47a0      	blx	r4
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}

08002516 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002522:	1cfb      	adds	r3, r7, #3
 8002524:	461a      	mov	r2, r3
 8002526:	2101      	movs	r1, #1
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ffe1 	bl	80024f0 <u8x8_byte_SendBytes>
 800252e:	4603      	mov	r3, r0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691c      	ldr	r4, [r3, #16]
 8002544:	2300      	movs	r3, #0
 8002546:	2200      	movs	r2, #0
 8002548:	2118      	movs	r1, #24
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	47a0      	blx	r4
 800254e:	4603      	mov	r3, r0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}

08002558 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691c      	ldr	r4, [r3, #16]
 8002564:	2300      	movs	r3, #0
 8002566:	2200      	movs	r2, #0
 8002568:	2119      	movs	r1, #25
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	47a0      	blx	r4
 800256e:	4603      	mov	r3, r0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bd90      	pop	{r4, r7, pc}

08002578 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68dc      	ldr	r4, [r3, #12]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	2300      	movs	r3, #0
 800258c:	2115      	movs	r1, #21
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	47a0      	blx	r4
 8002592:	4603      	mov	r3, r0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}

0800259c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68dc      	ldr	r4, [r3, #12]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	2300      	movs	r3, #0
 80025b0:	2116      	movs	r1, #22
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	47a0      	blx	r4
 80025b6:	4603      	mov	r3, r0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	460b      	mov	r3, r1
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68dc      	ldr	r4, [r3, #12]
 80025d2:	7afa      	ldrb	r2, [r7, #11]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2117      	movs	r1, #23
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	47a0      	blx	r4
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}

080025e6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80025e6:	b590      	push	{r4, r7, lr}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68dc      	ldr	r4, [r3, #12]
 80025f2:	2300      	movs	r3, #0
 80025f4:	2200      	movs	r2, #0
 80025f6:	2118      	movs	r1, #24
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	47a0      	blx	r4
 80025fc:	4603      	mov	r3, r0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}

08002606 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002606:	b590      	push	{r4, r7, lr}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68dc      	ldr	r4, [r3, #12]
 8002612:	2300      	movs	r3, #0
 8002614:	2200      	movs	r2, #0
 8002616:	2119      	movs	r1, #25
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	47a0      	blx	r4
 800261c:	4603      	mov	r3, r0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bd90      	pop	{r4, r7, pc}

08002626 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002626:	b590      	push	{r4, r7, lr}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	73fb      	strb	r3, [r7, #15]
    data++;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002640:	d031      	beq.n	80026a6 <u8x8_cad_SendSequence+0x80>
 8002642:	2bfe      	cmp	r3, #254	@ 0xfe
 8002644:	dc3d      	bgt.n	80026c2 <u8x8_cad_SendSequence+0x9c>
 8002646:	2b19      	cmp	r3, #25
 8002648:	dc3b      	bgt.n	80026c2 <u8x8_cad_SendSequence+0x9c>
 800264a:	2b18      	cmp	r3, #24
 800264c:	da23      	bge.n	8002696 <u8x8_cad_SendSequence+0x70>
 800264e:	2b16      	cmp	r3, #22
 8002650:	dc02      	bgt.n	8002658 <u8x8_cad_SendSequence+0x32>
 8002652:	2b15      	cmp	r3, #21
 8002654:	da03      	bge.n	800265e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002656:	e034      	b.n	80026c2 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002658:	2b17      	cmp	r3, #23
 800265a:	d00e      	beq.n	800267a <u8x8_cad_SendSequence+0x54>
	return;
 800265c:	e031      	b.n	80026c2 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68dc      	ldr	r4, [r3, #12]
 8002668:	7bba      	ldrb	r2, [r7, #14]
 800266a:	7bf9      	ldrb	r1, [r7, #15]
 800266c:	2300      	movs	r3, #0
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	47a0      	blx	r4
	  data++;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	603b      	str	r3, [r7, #0]
	  break;
 8002678:	e022      	b.n	80026c0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002680:	f107 030e 	add.w	r3, r7, #14
 8002684:	461a      	mov	r2, r3
 8002686:	2101      	movs	r1, #1
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff99 	bl	80025c0 <u8x8_cad_SendData>
	  data++;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	603b      	str	r3, [r7, #0]
	  break;
 8002694:	e014      	b.n	80026c0 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68dc      	ldr	r4, [r3, #12]
 800269a:	7bf9      	ldrb	r1, [r7, #15]
 800269c:	2300      	movs	r3, #0
 800269e:	2200      	movs	r2, #0
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	47a0      	blx	r4
	  break;
 80026a4:	e00c      	b.n	80026c0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	461a      	mov	r2, r3
 80026b0:	2129      	movs	r1, #41	@ 0x29
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa36 	bl	8002b24 <u8x8_gpio_call>
	  data++;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	3301      	adds	r3, #1
 80026bc:	603b      	str	r3, [r7, #0]
	  break;
 80026be:	bf00      	nop
    cmd = *data;
 80026c0:	e7b6      	b.n	8002630 <u8x8_cad_SendSequence+0xa>
	return;
 80026c2:	bf00      	nop
    }
  }
}
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd90      	pop	{r4, r7, pc}

080026ca <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80026ca:	b590      	push	{r4, r7, lr}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	460b      	mov	r3, r1
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ff2d 	bl	8002538 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80026de:	2140      	movs	r1, #64	@ 0x40
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff ff18 	bl	8002516 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691c      	ldr	r4, [r3, #16]
 80026ea:	7afa      	ldrb	r2, [r7, #11]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2117      	movs	r1, #23
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7ff ff2f 	bl	8002558 <u8x8_byte_EndTransfer>
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
	...

08002704 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	72fb      	strb	r3, [r7, #11]
 8002712:	4613      	mov	r3, r2
 8002714:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	3b14      	subs	r3, #20
 800271a:	2b05      	cmp	r3, #5
 800271c:	d86e      	bhi.n	80027fc <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800271e:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	080027bb 	.word	0x080027bb
 8002728:	0800273d 	.word	0x0800273d
 800272c:	0800276b 	.word	0x0800276b
 8002730:	08002777 	.word	0x08002777
 8002734:	080027df 	.word	0x080027df
 8002738:	080027e7 	.word	0x080027e7
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800273c:	4b33      	ldr	r3, [pc, #204]	@ (800280c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff ff07 	bl	8002558 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7ff fef4 	bl	8002538 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002750:	2100      	movs	r1, #0
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff fedf 	bl	8002516 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002758:	7abb      	ldrb	r3, [r7, #10]
 800275a:	4619      	mov	r1, r3
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff feda 	bl	8002516 <u8x8_byte_SendByte>
      in_transfer = 1;
 8002762:	4b2a      	ldr	r3, [pc, #168]	@ (800280c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002768:	e04a      	b.n	8002800 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800276a:	7abb      	ldrb	r3, [r7, #10]
 800276c:	4619      	mov	r1, r3
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff fed1 	bl	8002516 <u8x8_byte_SendByte>
      break;      
 8002774:	e044      	b.n	8002800 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8002776:	4b25      	ldr	r3, [pc, #148]	@ (800280c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff feea 	bl	8002558 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002788:	e00a      	b.n	80027a0 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	2118      	movs	r1, #24
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff ff9b 	bl	80026ca <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002794:	7abb      	ldrb	r3, [r7, #10]
 8002796:	3b18      	subs	r3, #24
 8002798:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3318      	adds	r3, #24
 800279e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80027a0:	7abb      	ldrb	r3, [r7, #10]
 80027a2:	2b18      	cmp	r3, #24
 80027a4:	d8f1      	bhi.n	800278a <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80027a6:	7abb      	ldrb	r3, [r7, #10]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4619      	mov	r1, r3
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff ff8c 	bl	80026ca <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80027b2:	4b16      	ldr	r3, [pc, #88]	@ (800280c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
      break;
 80027b8:	e022      	b.n	8002800 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027c0:	2bff      	cmp	r3, #255	@ 0xff
 80027c2:	d103      	bne.n	80027cc <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2278      	movs	r2, #120	@ 0x78
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691c      	ldr	r4, [r3, #16]
 80027d0:	7aba      	ldrb	r2, [r7, #10]
 80027d2:	7af9      	ldrb	r1, [r7, #11]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	47a0      	blx	r4
 80027da:	4603      	mov	r3, r0
 80027dc:	e011      	b.n	8002802 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
      break;
 80027e4:	e00c      	b.n	8002800 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80027e6:	4b09      	ldr	r3, [pc, #36]	@ (800280c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff feb2 	bl	8002558 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
      break;
 80027fa:	e001      	b.n	8002800 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8002800:	2301      	movs	r3, #1
}
 8002802:	4618      	mov	r0, r3
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	2000097c 	.word	0x2000097c

08002810 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	72fb      	strb	r3, [r7, #11]
 800281e:	4613      	mov	r3, r2
 8002820:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002822:	7afb      	ldrb	r3, [r7, #11]
 8002824:	3b0b      	subs	r3, #11
 8002826:	2b04      	cmp	r3, #4
 8002828:	f200 808a 	bhi.w	8002940 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800282c:	a201      	add	r2, pc, #4	@ (adr r2, 8002834 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002849 	.word	0x08002849
 8002838:	08002941 	.word	0x08002941
 800283c:	08002863 	.word	0x08002863
 8002840:	08002895 	.word	0x08002895
 8002844:	080028b5 	.word	0x080028b5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002848:	7abb      	ldrb	r3, [r7, #10]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800284e:	4940      	ldr	r1, [pc, #256]	@ (8002950 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff fee8 	bl	8002626 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8002856:	e075      	b.n	8002944 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002858:	493e      	ldr	r1, [pc, #248]	@ (8002954 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7ff fee3 	bl	8002626 <u8x8_cad_SendSequence>
      break;
 8002860:	e070      	b.n	8002944 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002862:	7abb      	ldrb	r3, [r7, #10]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002868:	493b      	ldr	r1, [pc, #236]	@ (8002958 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff fedb 	bl	8002626 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	7c9a      	ldrb	r2, [r3, #18]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800287c:	e062      	b.n	8002944 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800287e:	4937      	ldr	r1, [pc, #220]	@ (800295c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff fed0 	bl	8002626 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	7cda      	ldrb	r2, [r3, #19]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8002892:	e057      	b.n	8002944 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fea6 	bl	80025e6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800289a:	2181      	movs	r1, #129	@ 0x81
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff fe6b 	bl	8002578 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80028a2:	7abb      	ldrb	r3, [r7, #10]
 80028a4:	4619      	mov	r1, r3
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff fe78 	bl	800259c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff feaa 	bl	8002606 <u8x8_cad_EndTransfer>
      break;
 80028b2:	e047      	b.n	8002944 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fe96 	bl	80025e6 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	795b      	ldrb	r3, [r3, #5]
 80028be:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	4413      	add	r3, r2
 80028d0:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80028d2:	2140      	movs	r1, #64	@ 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff fe4f 	bl	8002578 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f043 0310 	orr.w	r3, r3, #16
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff fe45 	bl	8002578 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4619      	mov	r1, r3
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff fe4f 	bl	800259c <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	799b      	ldrb	r3, [r3, #6]
 8002902:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff fe46 	bl	800259c <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800291c:	7dbb      	ldrb	r3, [r7, #22]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4619      	mov	r1, r3
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fe4a 	bl	80025c0 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800292c:	7abb      	ldrb	r3, [r7, #10]
 800292e:	3b01      	subs	r3, #1
 8002930:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002932:	7abb      	ldrb	r3, [r7, #10]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1eb      	bne.n	8002910 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff fe64 	bl	8002606 <u8x8_cad_EndTransfer>
      break;
 800293e:	e001      	b.n	8002944 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8002944:	2301      	movs	r3, #1
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	08006e6c 	.word	0x08006e6c
 8002954:	08006e74 	.word	0x08006e74
 8002958:	08006e7c 	.word	0x08006e7c
 800295c:	08006e84 	.word	0x08006e84

08002960 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	72fb      	strb	r3, [r7, #11]
 800296e:	4613      	mov	r3, r2
 8002970:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002972:	7aba      	ldrb	r2, [r7, #10]
 8002974:	7af9      	ldrb	r1, [r7, #11]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff ff49 	bl	8002810 <u8x8_d_ssd1306_sh1106_generic>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8002984:	2301      	movs	r3, #1
 8002986:	e014      	b.n	80029b2 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8002988:	7afb      	ldrb	r3, [r7, #11]
 800298a:	2b09      	cmp	r3, #9
 800298c:	d009      	beq.n	80029a2 <u8x8_d_ssd1306_128x64_noname+0x42>
 800298e:	2b0a      	cmp	r3, #10
 8002990:	d10c      	bne.n	80029ac <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f829 	bl	80029ea <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002998:	4908      	ldr	r1, [pc, #32]	@ (80029bc <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff fe43 	bl	8002626 <u8x8_cad_SendSequence>
      break;
 80029a0:	e006      	b.n	80029b0 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80029a2:	4907      	ldr	r1, [pc, #28]	@ (80029c0 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f80d 	bl	80029c4 <u8x8_d_helper_display_setup_memory>
      break;
 80029aa:	e001      	b.n	80029b0 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80029b0:	2301      	movs	r3, #1
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	08006e34 	.word	0x08006e34
 80029c0:	08006e8c 	.word	0x08006e8c

080029c4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	7c9a      	ldrb	r2, [r3, #18]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80029ea:	b590      	push	{r4, r7, lr}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695c      	ldr	r4, [r3, #20]
 80029f6:	2300      	movs	r3, #0
 80029f8:	2200      	movs	r2, #0
 80029fa:	2128      	movs	r1, #40	@ 0x28
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68dc      	ldr	r4, [r3, #12]
 8002a04:	2300      	movs	r3, #0
 8002a06:	2200      	movs	r2, #0
 8002a08:	2114      	movs	r1, #20
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	214b      	movs	r1, #75	@ 0x4b
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f886 	bl	8002b24 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	791b      	ldrb	r3, [r3, #4]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2129      	movs	r1, #41	@ 0x29
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f87e 	bl	8002b24 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	214b      	movs	r1, #75	@ 0x4b
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f879 	bl	8002b24 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2129      	movs	r1, #41	@ 0x29
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f871 	bl	8002b24 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002a42:	2201      	movs	r2, #1
 8002a44:	214b      	movs	r1, #75	@ 0x4b
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f86c 	bl	8002b24 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	795b      	ldrb	r3, [r3, #5]
 8002a52:	461a      	mov	r2, r3
 8002a54:	2129      	movs	r1, #41	@ 0x29
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f864 	bl	8002b24 <u8x8_gpio_call>
}    
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	4611      	mov	r1, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	70fb      	strb	r3, [r7, #3]
 8002a76:	460b      	mov	r3, r1
 8002a78:	70bb      	strb	r3, [r7, #2]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002a82:	78bb      	ldrb	r3, [r7, #2]
 8002a84:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002a86:	787b      	ldrb	r3, [r7, #1]
 8002a88:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689c      	ldr	r4, [r3, #8]
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	2201      	movs	r2, #1
 8002a98:	210f      	movs	r1, #15
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	47a0      	blx	r4
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689c      	ldr	r4, [r3, #8]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2109      	movs	r1, #9
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	47a0      	blx	r4
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}

08002ac6 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002ac6:	b590      	push	{r4, r7, lr}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689c      	ldr	r4, [r3, #8]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	210a      	movs	r1, #10
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	47a0      	blx	r4
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd90      	pop	{r4, r7, pc}

08002ae4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689c      	ldr	r4, [r3, #8]
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	2300      	movs	r3, #0
 8002af8:	210b      	movs	r1, #11
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	47a0      	blx	r4
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}

08002b06 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002b06:	b590      	push	{r4, r7, lr}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689c      	ldr	r4, [r3, #8]
 8002b12:	2300      	movs	r3, #0
 8002b14:	2200      	movs	r2, #0
 8002b16:	2110      	movs	r1, #16
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	47a0      	blx	r4
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
 8002b30:	4613      	mov	r3, r2
 8002b32:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695c      	ldr	r4, [r3, #20]
 8002b38:	78ba      	ldrb	r2, [r7, #2]
 8002b3a:	78f9      	ldrb	r1, [r7, #3]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	47a0      	blx	r4
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}

08002b4a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	72fb      	strb	r3, [r7, #11]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <u8x8_SetupDefaults+0x60>)
 8002b7a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <u8x8_SetupDefaults+0x60>)
 8002b80:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a10      	ldr	r2, [pc, #64]	@ (8002bc8 <u8x8_SetupDefaults+0x60>)
 8002b86:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bc8 <u8x8_SetupDefaults+0x60>)
 8002b8c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    u8x8->device_address = 0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	22ff      	movs	r2, #255	@ 0xff
 8002bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	22ff      	movs	r2, #255	@ 0xff
 8002bb8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	08002b4b 	.word	0x08002b4b

08002bcc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff ffc4 	bl	8002b68 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff ff55 	bl	8002aa8 <u8x8_SetupMemory>
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c08:	f7fe f9fe 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c0c:	480b      	ldr	r0, [pc, #44]	@ (8002c3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c0e:	490c      	ldr	r1, [pc, #48]	@ (8002c40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c10:	4a0c      	ldr	r2, [pc, #48]	@ (8002c44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c14:	e002      	b.n	8002c1c <LoopCopyDataInit>

08002c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1a:	3304      	adds	r3, #4

08002c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c20:	d3f9      	bcc.n	8002c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c22:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c24:	4c09      	ldr	r4, [pc, #36]	@ (8002c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c28:	e001      	b.n	8002c2e <LoopFillZerobss>

08002c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c2c:	3204      	adds	r2, #4

08002c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c30:	d3fb      	bcc.n	8002c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c32:	f003 fec7 	bl	80069c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c36:	f7fd fd3b 	bl	80006b0 <main>
  bx lr
 8002c3a:	4770      	bx	lr
  ldr r0, =_sdata
 8002c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c40:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002c44:	08006ec0 	.word	0x08006ec0
  ldr r2, =_sbss
 8002c48:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002c4c:	20000984 	.word	0x20000984

08002c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c50:	e7fe      	b.n	8002c50 <ADC1_2_IRQHandler>
	...

08002c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <HAL_Init+0x28>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a07      	ldr	r2, [pc, #28]	@ (8002c7c <HAL_Init+0x28>)
 8002c5e:	f043 0310 	orr.w	r3, r3, #16
 8002c62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f000 fd13 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6a:	200f      	movs	r0, #15
 8002c6c:	f000 f808 	bl	8002c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c70:	f7fd fff2 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40022000 	.word	0x40022000

08002c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c88:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_InitTick+0x54>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <HAL_InitTick+0x58>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4619      	mov	r1, r3
 8002c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fd2b 	bl	80036fa <HAL_SYSTICK_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00e      	b.n	8002ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b0f      	cmp	r3, #15
 8002cb2:	d80a      	bhi.n	8002cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f000 fcf3 	bl	80036a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc0:	4a06      	ldr	r2, [pc, #24]	@ (8002cdc <HAL_InitTick+0x5c>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000200 	.word	0x20000200
 8002cd8:	20000208 	.word	0x20000208
 8002cdc:	20000204 	.word	0x20000204

08002ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_IncTick+0x1c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_IncTick+0x20>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	4a03      	ldr	r2, [pc, #12]	@ (8002d00 <HAL_IncTick+0x20>)
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000208 	.word	0x20000208
 8002d00:	20000980 	.word	0x20000980

08002d04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b02      	ldr	r3, [pc, #8]	@ (8002d14 <HAL_GetTick+0x10>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	20000980 	.word	0x20000980

08002d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff fff0 	bl	8002d04 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d005      	beq.n	8002d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_Delay+0x44>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d3e:	bf00      	nop
 8002d40:	f7ff ffe0 	bl	8002d04 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d8f7      	bhi.n	8002d40 <HAL_Delay+0x28>
  {
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000208 	.word	0x20000208

08002d60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0be      	b.n	8002f00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd ff8c 	bl	8000cbc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 faff 	bl	80033a8 <ADC_ConversionStop_Disable>
 8002daa:	4603      	mov	r3, r0
 8002dac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 8099 	bne.w	8002eee <HAL_ADC_Init+0x18e>
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 8095 	bne.w	8002eee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dcc:	f023 0302 	bic.w	r3, r3, #2
 8002dd0:	f043 0202 	orr.w	r2, r3, #2
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002de0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7b1b      	ldrb	r3, [r3, #12]
 8002de6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002de8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df8:	d003      	beq.n	8002e02 <HAL_ADC_Init+0xa2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_ADC_Init+0xa8>
 8002e02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e06:	e000      	b.n	8002e0a <HAL_ADC_Init+0xaa>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7d1b      	ldrb	r3, [r3, #20]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d119      	bne.n	8002e4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7b1b      	ldrb	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	035a      	lsls	r2, r3, #13
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e00b      	b.n	8002e4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	4b28      	ldr	r3, [pc, #160]	@ (8002f08 <HAL_ADC_Init+0x1a8>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7c:	d003      	beq.n	8002e86 <HAL_ADC_Init+0x126>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d104      	bne.n	8002e90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	051b      	lsls	r3, r3, #20
 8002e8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <HAL_ADC_Init+0x1ac>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10b      	bne.n	8002ecc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eca:	e018      	b.n	8002efe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	f023 0312 	bic.w	r3, r3, #18
 8002ed4:	f043 0210 	orr.w	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eec:	e007      	b.n	8002efe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	f043 0210 	orr.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	ffe1f7fd 	.word	0xffe1f7fd
 8002f0c:	ff1f0efe 	.word	0xff1f0efe

08002f10 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a64      	ldr	r2, [pc, #400]	@ (80030b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <HAL_ADC_Start_DMA+0x24>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a63      	ldr	r2, [pc, #396]	@ (80030bc <HAL_ADC_Start_DMA+0x1ac>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d106      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x32>
 8002f34:	4b60      	ldr	r3, [pc, #384]	@ (80030b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 80b3 	bne.w	80030a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_Start_DMA+0x40>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0ae      	b.n	80030ae <HAL_ADC_Start_DMA+0x19e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f9cb 	bl	80032f4 <ADC_Enable>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 809a 	bne.w	800309e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4e      	ldr	r2, [pc, #312]	@ (80030bc <HAL_ADC_Start_DMA+0x1ac>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d105      	bne.n	8002f94 <HAL_ADC_Start_DMA+0x84>
 8002f88:	4b4b      	ldr	r3, [pc, #300]	@ (80030b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d115      	bne.n	8002fc0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d026      	beq.n	8002ffc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fbe:	e01d      	b.n	8002ffc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a39      	ldr	r2, [pc, #228]	@ (80030b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ADC_Start_DMA+0xd0>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a38      	ldr	r2, [pc, #224]	@ (80030bc <HAL_ADC_Start_DMA+0x1ac>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10d      	bne.n	8002ffc <HAL_ADC_Start_DMA+0xec>
 8002fe0:	4b35      	ldr	r3, [pc, #212]	@ (80030b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ff4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	f023 0206 	bic.w	r2, r3, #6
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003014:	e002      	b.n	800301c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a25      	ldr	r2, [pc, #148]	@ (80030c0 <HAL_ADC_Start_DMA+0x1b0>)
 800302a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4a24      	ldr	r2, [pc, #144]	@ (80030c4 <HAL_ADC_Start_DMA+0x1b4>)
 8003032:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <HAL_ADC_Start_DMA+0x1b8>)
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0202 	mvn.w	r2, #2
 8003044:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003054:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a18      	ldr	r0, [r3, #32]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	334c      	adds	r3, #76	@ 0x4c
 8003060:	4619      	mov	r1, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f000 fbaf 	bl	80037c8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003074:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003078:	d108      	bne.n	800308c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003088:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800308a:	e00f      	b.n	80030ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800309a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800309c:	e006      	b.n	80030ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80030a6:	e001      	b.n	80030ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40012400 	.word	0x40012400
 80030bc:	40012800 	.word	0x40012800
 80030c0:	0800342b 	.word	0x0800342b
 80030c4:	080034a7 	.word	0x080034a7
 80030c8:	080034c3 	.word	0x080034c3

080030cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
	...

08003104 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x20>
 8003120:	2302      	movs	r3, #2
 8003122:	e0dc      	b.n	80032de <HAL_ADC_ConfigChannel+0x1da>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b06      	cmp	r3, #6
 8003132:	d81c      	bhi.n	800316e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	3b05      	subs	r3, #5
 8003146:	221f      	movs	r2, #31
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	4019      	ands	r1, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	3b05      	subs	r3, #5
 8003160:	fa00 f203 	lsl.w	r2, r0, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	635a      	str	r2, [r3, #52]	@ 0x34
 800316c:	e03c      	b.n	80031e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d81c      	bhi.n	80031b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	3b23      	subs	r3, #35	@ 0x23
 8003188:	221f      	movs	r2, #31
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	4019      	ands	r1, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	3b23      	subs	r3, #35	@ 0x23
 80031a2:	fa00 f203 	lsl.w	r2, r0, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80031ae:	e01b      	b.n	80031e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	3b41      	subs	r3, #65	@ 0x41
 80031c2:	221f      	movs	r2, #31
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	4019      	ands	r1, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	3b41      	subs	r3, #65	@ 0x41
 80031dc:	fa00 f203 	lsl.w	r2, r0, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	d91c      	bls.n	800322a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68d9      	ldr	r1, [r3, #12]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	3b1e      	subs	r3, #30
 8003202:	2207      	movs	r2, #7
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	4019      	ands	r1, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6898      	ldr	r0, [r3, #8]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	3b1e      	subs	r3, #30
 800321c:	fa00 f203 	lsl.w	r2, r0, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	60da      	str	r2, [r3, #12]
 8003228:	e019      	b.n	800325e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6919      	ldr	r1, [r3, #16]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	2207      	movs	r2, #7
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	4019      	ands	r1, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6898      	ldr	r0, [r3, #8]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	fa00 f203 	lsl.w	r2, r0, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b10      	cmp	r3, #16
 8003264:	d003      	beq.n	800326e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800326a:	2b11      	cmp	r3, #17
 800326c:	d132      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1d      	ldr	r2, [pc, #116]	@ (80032e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d125      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d126      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003294:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b10      	cmp	r3, #16
 800329c:	d11a      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800329e:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <HAL_ADC_ConfigChannel+0x1e8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a13      	ldr	r2, [pc, #76]	@ (80032f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	0c9a      	lsrs	r2, r3, #18
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032b4:	e002      	b.n	80032bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f9      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x1b2>
 80032c2:	e007      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012400 	.word	0x40012400
 80032ec:	20000200 	.word	0x20000200
 80032f0:	431bde83 	.word	0x431bde83

080032f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d040      	beq.n	8003394 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003322:	4b1f      	ldr	r3, [pc, #124]	@ (80033a0 <ADC_Enable+0xac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <ADC_Enable+0xb0>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	0c9b      	lsrs	r3, r3, #18
 800332e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003330:	e002      	b.n	8003338 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3b01      	subs	r3, #1
 8003336:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f9      	bne.n	8003332 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800333e:	f7ff fce1 	bl	8002d04 <HAL_GetTick>
 8003342:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003344:	e01f      	b.n	8003386 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003346:	f7ff fcdd 	bl	8002d04 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d918      	bls.n	8003386 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d011      	beq.n	8003386 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003366:	f043 0210 	orr.w	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e007      	b.n	8003396 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d1d8      	bne.n	8003346 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000200 	.word	0x20000200
 80033a4:	431bde83 	.word	0x431bde83

080033a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d12e      	bne.n	8003420 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033d2:	f7ff fc97 	bl	8002d04 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033d8:	e01b      	b.n	8003412 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033da:	f7ff fc93 	bl	8002d04 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d914      	bls.n	8003412 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10d      	bne.n	8003412 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	f043 0210 	orr.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e007      	b.n	8003422 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d0dc      	beq.n	80033da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003440:	2b00      	cmp	r3, #0
 8003442:	d127      	bne.n	8003494 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003448:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800345a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800345e:	d115      	bne.n	800348c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003464:	2b00      	cmp	r3, #0
 8003466:	d111      	bne.n	800348c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7ff fe1d 	bl	80030cc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003492:	e004      	b.n	800349e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff fe12 	bl	80030de <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	f043 0204 	orr.w	r2, r3, #4
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff fe01 	bl	80030f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352a:	4a04      	ldr	r2, [pc, #16]	@ (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	60d3      	str	r3, [r2, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003544:	4b04      	ldr	r3, [pc, #16]	@ (8003558 <__NVIC_GetPriorityGrouping+0x18>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 0307 	and.w	r3, r3, #7
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db0b      	blt.n	8003586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	4906      	ldr	r1, [pc, #24]	@ (8003590 <__NVIC_EnableIRQ+0x34>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db0a      	blt.n	80035be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	490c      	ldr	r1, [pc, #48]	@ (80035e0 <__NVIC_SetPriority+0x4c>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	440b      	add	r3, r1
 80035b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035bc:	e00a      	b.n	80035d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4908      	ldr	r1, [pc, #32]	@ (80035e4 <__NVIC_SetPriority+0x50>)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	3b04      	subs	r3, #4
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	440b      	add	r3, r1
 80035d2:	761a      	strb	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000e100 	.word	0xe000e100
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	@ 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f1c3 0307 	rsb	r3, r3, #7
 8003602:	2b04      	cmp	r3, #4
 8003604:	bf28      	it	cs
 8003606:	2304      	movcs	r3, #4
 8003608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3304      	adds	r3, #4
 800360e:	2b06      	cmp	r3, #6
 8003610:	d902      	bls.n	8003618 <NVIC_EncodePriority+0x30>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3b03      	subs	r3, #3
 8003616:	e000      	b.n	800361a <NVIC_EncodePriority+0x32>
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	f04f 32ff 	mov.w	r2, #4294967295
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	401a      	ands	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003630:	f04f 31ff 	mov.w	r1, #4294967295
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	43d9      	mvns	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	4313      	orrs	r3, r2
         );
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800365c:	d301      	bcc.n	8003662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365e:	2301      	movs	r3, #1
 8003660:	e00f      	b.n	8003682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003662:	4a0a      	ldr	r2, [pc, #40]	@ (800368c <SysTick_Config+0x40>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366a:	210f      	movs	r1, #15
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	f7ff ff90 	bl	8003594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <SysTick_Config+0x40>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367a:	4b04      	ldr	r3, [pc, #16]	@ (800368c <SysTick_Config+0x40>)
 800367c:	2207      	movs	r2, #7
 800367e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	e000e010 	.word	0xe000e010

08003690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff2d 	bl	80034f8 <__NVIC_SetPriorityGrouping>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b8:	f7ff ff42 	bl	8003540 <__NVIC_GetPriorityGrouping>
 80036bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff90 	bl	80035e8 <NVIC_EncodePriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff5f 	bl	8003594 <__NVIC_SetPriority>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff35 	bl	800355c <__NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffa2 	bl	800364c <SysTick_Config>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e043      	b.n	80037b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	4b22      	ldr	r3, [pc, #136]	@ (80037bc <HAL_DMA_Init+0xa8>)
 8003732:	4413      	add	r3, r2
 8003734:	4a22      	ldr	r2, [pc, #136]	@ (80037c0 <HAL_DMA_Init+0xac>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	009a      	lsls	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1f      	ldr	r2, [pc, #124]	@ (80037c4 <HAL_DMA_Init+0xb0>)
 8003746:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800375e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003762:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800376c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	bffdfff8 	.word	0xbffdfff8
 80037c0:	cccccccd 	.word	0xcccccccd
 80037c4:	40020000 	.word	0x40020000

080037c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_DMA_Start_IT+0x20>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e04b      	b.n	8003880 <HAL_DMA_Start_IT+0xb8>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d13a      	bne.n	8003872 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f9eb 	bl	8003bfc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 020e 	orr.w	r2, r2, #14
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e00f      	b.n	8003860 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 020a 	orr.w	r2, r2, #10
 800385e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e005      	b.n	800387e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800387a:	2302      	movs	r3, #2
 800387c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800387e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d008      	beq.n	80038b2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2204      	movs	r2, #4
 80038a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e020      	b.n	80038f4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 020e 	bic.w	r2, r2, #14
 80038c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d005      	beq.n	8003924 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2204      	movs	r2, #4
 800391c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	e051      	b.n	80039c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 020e 	bic.w	r2, r2, #14
 8003932:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a22      	ldr	r2, [pc, #136]	@ (80039d4 <HAL_DMA_Abort_IT+0xd4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d029      	beq.n	80039a2 <HAL_DMA_Abort_IT+0xa2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a21      	ldr	r2, [pc, #132]	@ (80039d8 <HAL_DMA_Abort_IT+0xd8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d022      	beq.n	800399e <HAL_DMA_Abort_IT+0x9e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <HAL_DMA_Abort_IT+0xdc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01a      	beq.n	8003998 <HAL_DMA_Abort_IT+0x98>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1e      	ldr	r2, [pc, #120]	@ (80039e0 <HAL_DMA_Abort_IT+0xe0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d012      	beq.n	8003992 <HAL_DMA_Abort_IT+0x92>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1c      	ldr	r2, [pc, #112]	@ (80039e4 <HAL_DMA_Abort_IT+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00a      	beq.n	800398c <HAL_DMA_Abort_IT+0x8c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1b      	ldr	r2, [pc, #108]	@ (80039e8 <HAL_DMA_Abort_IT+0xe8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d102      	bne.n	8003986 <HAL_DMA_Abort_IT+0x86>
 8003980:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003984:	e00e      	b.n	80039a4 <HAL_DMA_Abort_IT+0xa4>
 8003986:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800398a:	e00b      	b.n	80039a4 <HAL_DMA_Abort_IT+0xa4>
 800398c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003990:	e008      	b.n	80039a4 <HAL_DMA_Abort_IT+0xa4>
 8003992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003996:	e005      	b.n	80039a4 <HAL_DMA_Abort_IT+0xa4>
 8003998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800399c:	e002      	b.n	80039a4 <HAL_DMA_Abort_IT+0xa4>
 800399e:	2310      	movs	r3, #16
 80039a0:	e000      	b.n	80039a4 <HAL_DMA_Abort_IT+0xa4>
 80039a2:	2301      	movs	r3, #1
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <HAL_DMA_Abort_IT+0xec>)
 80039a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
    } 
  }
  return status;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40020008 	.word	0x40020008
 80039d8:	4002001c 	.word	0x4002001c
 80039dc:	40020030 	.word	0x40020030
 80039e0:	40020044 	.word	0x40020044
 80039e4:	40020058 	.word	0x40020058
 80039e8:	4002006c 	.word	0x4002006c
 80039ec:	40020000 	.word	0x40020000

080039f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d04f      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0xc8>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d04a      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a66      	ldr	r2, [pc, #408]	@ (8003be0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d029      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xae>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a65      	ldr	r2, [pc, #404]	@ (8003be4 <HAL_DMA_IRQHandler+0x1f4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_IRQHandler+0xaa>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a63      	ldr	r2, [pc, #396]	@ (8003be8 <HAL_DMA_IRQHandler+0x1f8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01a      	beq.n	8003a94 <HAL_DMA_IRQHandler+0xa4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a62      	ldr	r2, [pc, #392]	@ (8003bec <HAL_DMA_IRQHandler+0x1fc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d012      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x9e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a60      	ldr	r2, [pc, #384]	@ (8003bf0 <HAL_DMA_IRQHandler+0x200>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00a      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x98>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a5f      	ldr	r2, [pc, #380]	@ (8003bf4 <HAL_DMA_IRQHandler+0x204>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d102      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x92>
 8003a7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a80:	e00e      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xb0>
 8003a82:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a86:	e00b      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xb0>
 8003a88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a8c:	e008      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xb0>
 8003a8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a92:	e005      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xb0>
 8003a94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a98:	e002      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xb0>
 8003a9a:	2340      	movs	r3, #64	@ 0x40
 8003a9c:	e000      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xb0>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	4a55      	ldr	r2, [pc, #340]	@ (8003bf8 <HAL_DMA_IRQHandler+0x208>)
 8003aa2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8094 	beq.w	8003bd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ab6:	e08e      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	2202      	movs	r2, #2
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d056      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x186>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d051      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 020a 	bic.w	r2, r2, #10
 8003aee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a38      	ldr	r2, [pc, #224]	@ (8003be0 <HAL_DMA_IRQHandler+0x1f0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d029      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x166>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a37      	ldr	r2, [pc, #220]	@ (8003be4 <HAL_DMA_IRQHandler+0x1f4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x162>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a35      	ldr	r2, [pc, #212]	@ (8003be8 <HAL_DMA_IRQHandler+0x1f8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01a      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x15c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a34      	ldr	r2, [pc, #208]	@ (8003bec <HAL_DMA_IRQHandler+0x1fc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d012      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x156>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a32      	ldr	r2, [pc, #200]	@ (8003bf0 <HAL_DMA_IRQHandler+0x200>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00a      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x150>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a31      	ldr	r2, [pc, #196]	@ (8003bf4 <HAL_DMA_IRQHandler+0x204>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d102      	bne.n	8003b3a <HAL_DMA_IRQHandler+0x14a>
 8003b34:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b38:	e00e      	b.n	8003b58 <HAL_DMA_IRQHandler+0x168>
 8003b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b3e:	e00b      	b.n	8003b58 <HAL_DMA_IRQHandler+0x168>
 8003b40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b44:	e008      	b.n	8003b58 <HAL_DMA_IRQHandler+0x168>
 8003b46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b4a:	e005      	b.n	8003b58 <HAL_DMA_IRQHandler+0x168>
 8003b4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b50:	e002      	b.n	8003b58 <HAL_DMA_IRQHandler+0x168>
 8003b52:	2320      	movs	r3, #32
 8003b54:	e000      	b.n	8003b58 <HAL_DMA_IRQHandler+0x168>
 8003b56:	2302      	movs	r3, #2
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <HAL_DMA_IRQHandler+0x208>)
 8003b5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d034      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b74:	e02f      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d028      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x1e8>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d023      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 020e 	bic.w	r2, r2, #14
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
    }
  }
  return;
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
}
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40020008 	.word	0x40020008
 8003be4:	4002001c 	.word	0x4002001c
 8003be8:	40020030 	.word	0x40020030
 8003bec:	40020044 	.word	0x40020044
 8003bf0:	40020058 	.word	0x40020058
 8003bf4:	4002006c 	.word	0x4002006c
 8003bf8:	40020000 	.word	0x40020000

08003bfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c12:	2101      	movs	r1, #1
 8003c14:	fa01 f202 	lsl.w	r2, r1, r2
 8003c18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d108      	bne.n	8003c3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c3a:	e007      	b.n	8003c4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b08b      	sub	sp, #44	@ 0x2c
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c66:	2300      	movs	r3, #0
 8003c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c6a:	e169      	b.n	8003f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	f040 8158 	bne.w	8003f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a9a      	ldr	r2, [pc, #616]	@ (8003ef8 <HAL_GPIO_Init+0x2a0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d05e      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003c94:	4a98      	ldr	r2, [pc, #608]	@ (8003ef8 <HAL_GPIO_Init+0x2a0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d875      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003c9a:	4a98      	ldr	r2, [pc, #608]	@ (8003efc <HAL_GPIO_Init+0x2a4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d058      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003ca0:	4a96      	ldr	r2, [pc, #600]	@ (8003efc <HAL_GPIO_Init+0x2a4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d86f      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003ca6:	4a96      	ldr	r2, [pc, #600]	@ (8003f00 <HAL_GPIO_Init+0x2a8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d052      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003cac:	4a94      	ldr	r2, [pc, #592]	@ (8003f00 <HAL_GPIO_Init+0x2a8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d869      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003cb2:	4a94      	ldr	r2, [pc, #592]	@ (8003f04 <HAL_GPIO_Init+0x2ac>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d04c      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003cb8:	4a92      	ldr	r2, [pc, #584]	@ (8003f04 <HAL_GPIO_Init+0x2ac>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d863      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003cbe:	4a92      	ldr	r2, [pc, #584]	@ (8003f08 <HAL_GPIO_Init+0x2b0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d046      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003cc4:	4a90      	ldr	r2, [pc, #576]	@ (8003f08 <HAL_GPIO_Init+0x2b0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d85d      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003cca:	2b12      	cmp	r3, #18
 8003ccc:	d82a      	bhi.n	8003d24 <HAL_GPIO_Init+0xcc>
 8003cce:	2b12      	cmp	r3, #18
 8003cd0:	d859      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <HAL_GPIO_Init+0x80>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d53 	.word	0x08003d53
 8003cdc:	08003d2d 	.word	0x08003d2d
 8003ce0:	08003d3f 	.word	0x08003d3f
 8003ce4:	08003d81 	.word	0x08003d81
 8003ce8:	08003d87 	.word	0x08003d87
 8003cec:	08003d87 	.word	0x08003d87
 8003cf0:	08003d87 	.word	0x08003d87
 8003cf4:	08003d87 	.word	0x08003d87
 8003cf8:	08003d87 	.word	0x08003d87
 8003cfc:	08003d87 	.word	0x08003d87
 8003d00:	08003d87 	.word	0x08003d87
 8003d04:	08003d87 	.word	0x08003d87
 8003d08:	08003d87 	.word	0x08003d87
 8003d0c:	08003d87 	.word	0x08003d87
 8003d10:	08003d87 	.word	0x08003d87
 8003d14:	08003d87 	.word	0x08003d87
 8003d18:	08003d87 	.word	0x08003d87
 8003d1c:	08003d35 	.word	0x08003d35
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	4a79      	ldr	r2, [pc, #484]	@ (8003f0c <HAL_GPIO_Init+0x2b4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d2a:	e02c      	b.n	8003d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	623b      	str	r3, [r7, #32]
          break;
 8003d32:	e029      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	623b      	str	r3, [r7, #32]
          break;
 8003d3c:	e024      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	3308      	adds	r3, #8
 8003d44:	623b      	str	r3, [r7, #32]
          break;
 8003d46:	e01f      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	623b      	str	r3, [r7, #32]
          break;
 8003d50:	e01a      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	623b      	str	r3, [r7, #32]
          break;
 8003d5e:	e013      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d68:	2308      	movs	r3, #8
 8003d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	611a      	str	r2, [r3, #16]
          break;
 8003d72:	e009      	b.n	8003d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d74:	2308      	movs	r3, #8
 8003d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	615a      	str	r2, [r3, #20]
          break;
 8003d7e:	e003      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d80:	2300      	movs	r3, #0
 8003d82:	623b      	str	r3, [r7, #32]
          break;
 8003d84:	e000      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          break;
 8003d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2bff      	cmp	r3, #255	@ 0xff
 8003d8c:	d801      	bhi.n	8003d92 <HAL_GPIO_Init+0x13a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	e001      	b.n	8003d96 <HAL_GPIO_Init+0x13e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2bff      	cmp	r3, #255	@ 0xff
 8003d9c:	d802      	bhi.n	8003da4 <HAL_GPIO_Init+0x14c>
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	e002      	b.n	8003daa <HAL_GPIO_Init+0x152>
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	3b08      	subs	r3, #8
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	210f      	movs	r1, #15
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	401a      	ands	r2, r3
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80b1 	beq.w	8003f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f10 <HAL_GPIO_Init+0x2b8>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8003f10 <HAL_GPIO_Init+0x2b8>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6193      	str	r3, [r2, #24]
 8003de4:	4b4a      	ldr	r3, [pc, #296]	@ (8003f10 <HAL_GPIO_Init+0x2b8>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003df0:	4a48      	ldr	r2, [pc, #288]	@ (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	3302      	adds	r3, #2
 8003df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	220f      	movs	r2, #15
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4013      	ands	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a40      	ldr	r2, [pc, #256]	@ (8003f18 <HAL_GPIO_Init+0x2c0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_GPIO_Init+0x1ec>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f1c <HAL_GPIO_Init+0x2c4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00d      	beq.n	8003e40 <HAL_GPIO_Init+0x1e8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3e      	ldr	r2, [pc, #248]	@ (8003f20 <HAL_GPIO_Init+0x2c8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <HAL_GPIO_Init+0x1e4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f24 <HAL_GPIO_Init+0x2cc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_GPIO_Init+0x1e0>
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <HAL_GPIO_Init+0x1ee>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	e004      	b.n	8003e46 <HAL_GPIO_Init+0x1ee>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e002      	b.n	8003e46 <HAL_GPIO_Init+0x1ee>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_GPIO_Init+0x1ee>
 8003e44:	2300      	movs	r3, #0
 8003e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e48:	f002 0203 	and.w	r2, r2, #3
 8003e4c:	0092      	lsls	r2, r2, #2
 8003e4e:	4093      	lsls	r3, r2
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e56:	492f      	ldr	r1, [pc, #188]	@ (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e70:	4b2d      	ldr	r3, [pc, #180]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	492c      	ldr	r1, [pc, #176]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	608b      	str	r3, [r1, #8]
 8003e7c:	e006      	b.n	8003e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	4928      	ldr	r1, [pc, #160]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e98:	4b23      	ldr	r3, [pc, #140]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	4922      	ldr	r1, [pc, #136]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60cb      	str	r3, [r1, #12]
 8003ea4:	e006      	b.n	8003eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ea6:	4b20      	ldr	r3, [pc, #128]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	491e      	ldr	r1, [pc, #120]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d006      	beq.n	8003ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	4918      	ldr	r1, [pc, #96]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
 8003ecc:	e006      	b.n	8003edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ece:	4b16      	ldr	r3, [pc, #88]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	4914      	ldr	r1, [pc, #80]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d021      	beq.n	8003f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	490e      	ldr	r1, [pc, #56]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	e021      	b.n	8003f3a <HAL_GPIO_Init+0x2e2>
 8003ef6:	bf00      	nop
 8003ef8:	10320000 	.word	0x10320000
 8003efc:	10310000 	.word	0x10310000
 8003f00:	10220000 	.word	0x10220000
 8003f04:	10210000 	.word	0x10210000
 8003f08:	10120000 	.word	0x10120000
 8003f0c:	10110000 	.word	0x10110000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40010800 	.word	0x40010800
 8003f1c:	40010c00 	.word	0x40010c00
 8003f20:	40011000 	.word	0x40011000
 8003f24:	40011400 	.word	0x40011400
 8003f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <HAL_GPIO_Init+0x304>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	4909      	ldr	r1, [pc, #36]	@ (8003f5c <HAL_GPIO_Init+0x304>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f47f ae8e 	bne.w	8003c6c <HAL_GPIO_Init+0x14>
  }
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	372c      	adds	r7, #44	@ 0x2c
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40010400 	.word	0x40010400

08003f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e001      	b.n	8003f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e12b      	b.n	80041fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fc fee8 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	@ 0x24
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f001 f832 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8003ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4a81      	ldr	r2, [pc, #516]	@ (8004204 <HAL_I2C_Init+0x274>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d807      	bhi.n	8004014 <HAL_I2C_Init+0x84>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a80      	ldr	r2, [pc, #512]	@ (8004208 <HAL_I2C_Init+0x278>)
 8004008:	4293      	cmp	r3, r2
 800400a:	bf94      	ite	ls
 800400c:	2301      	movls	r3, #1
 800400e:	2300      	movhi	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e006      	b.n	8004022 <HAL_I2C_Init+0x92>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a7d      	ldr	r2, [pc, #500]	@ (800420c <HAL_I2C_Init+0x27c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	bf94      	ite	ls
 800401c:	2301      	movls	r3, #1
 800401e:	2300      	movhi	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0e7      	b.n	80041fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a78      	ldr	r2, [pc, #480]	@ (8004210 <HAL_I2C_Init+0x280>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0c9b      	lsrs	r3, r3, #18
 8004034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a6a      	ldr	r2, [pc, #424]	@ (8004204 <HAL_I2C_Init+0x274>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d802      	bhi.n	8004064 <HAL_I2C_Init+0xd4>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3301      	adds	r3, #1
 8004062:	e009      	b.n	8004078 <HAL_I2C_Init+0xe8>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	4a69      	ldr	r2, [pc, #420]	@ (8004214 <HAL_I2C_Init+0x284>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	3301      	adds	r3, #1
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	430b      	orrs	r3, r1
 800407e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800408a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	495c      	ldr	r1, [pc, #368]	@ (8004204 <HAL_I2C_Init+0x274>)
 8004094:	428b      	cmp	r3, r1
 8004096:	d819      	bhi.n	80040cc <HAL_I2C_Init+0x13c>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1e59      	subs	r1, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040ac:	400b      	ands	r3, r1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_I2C_Init+0x138>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1e59      	subs	r1, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c6:	e051      	b.n	800416c <HAL_I2C_Init+0x1dc>
 80040c8:	2304      	movs	r3, #4
 80040ca:	e04f      	b.n	800416c <HAL_I2C_Init+0x1dc>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d111      	bne.n	80040f8 <HAL_I2C_Init+0x168>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1e58      	subs	r0, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	440b      	add	r3, r1
 80040e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e012      	b.n	800411e <HAL_I2C_Init+0x18e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1e58      	subs	r0, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	0099      	lsls	r1, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	fbb0 f3f3 	udiv	r3, r0, r3
 800410e:	3301      	adds	r3, #1
 8004110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Init+0x196>
 8004122:	2301      	movs	r3, #1
 8004124:	e022      	b.n	800416c <HAL_I2C_Init+0x1dc>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10e      	bne.n	800414c <HAL_I2C_Init+0x1bc>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1e58      	subs	r0, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6859      	ldr	r1, [r3, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	440b      	add	r3, r1
 800413c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004140:	3301      	adds	r3, #1
 8004142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800414a:	e00f      	b.n	800416c <HAL_I2C_Init+0x1dc>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	6809      	ldr	r1, [r1, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800419a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6911      	ldr	r1, [r2, #16]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68d2      	ldr	r2, [r2, #12]
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	000186a0 	.word	0x000186a0
 8004208:	001e847f 	.word	0x001e847f
 800420c:	003d08ff 	.word	0x003d08ff
 8004210:	431bde83 	.word	0x431bde83
 8004214:	10624dd3 	.word	0x10624dd3

08004218 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	461a      	mov	r2, r3
 8004224:	460b      	mov	r3, r1
 8004226:	817b      	strh	r3, [r7, #10]
 8004228:	4613      	mov	r3, r2
 800422a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800422c:	f7fe fd6a 	bl	8002d04 <HAL_GetTick>
 8004230:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b20      	cmp	r3, #32
 800423c:	f040 80e0 	bne.w	8004400 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2319      	movs	r3, #25
 8004246:	2201      	movs	r2, #1
 8004248:	4970      	ldr	r1, [pc, #448]	@ (800440c <HAL_I2C_Master_Transmit+0x1f4>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f964 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
 8004258:	e0d3      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_I2C_Master_Transmit+0x50>
 8004264:	2302      	movs	r3, #2
 8004266:	e0cc      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ea>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d007      	beq.n	800428e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800429c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2221      	movs	r2, #33	@ 0x21
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2210      	movs	r2, #16
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	893a      	ldrh	r2, [r7, #8]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a50      	ldr	r2, [pc, #320]	@ (8004410 <HAL_I2C_Master_Transmit+0x1f8>)
 80042ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042d0:	8979      	ldrh	r1, [r7, #10]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f89c 	bl	8004414 <I2C_MasterRequestWrite>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e08d      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042fc:	e066      	b.n	80043cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	6a39      	ldr	r1, [r7, #32]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fa22 	bl	800474c <I2C_WaitOnTXEFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	2b04      	cmp	r3, #4
 8004314:	d107      	bne.n	8004326 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06b      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11b      	bne.n	80043a0 <HAL_I2C_Master_Transmit+0x188>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d017      	beq.n	80043a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	6a39      	ldr	r1, [r7, #32]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fa19 	bl	80047dc <I2C_WaitOnBTFFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00d      	beq.n	80043cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d107      	bne.n	80043c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e01a      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d194      	bne.n	80042fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	00100002 	.word	0x00100002
 8004410:	ffff0000 	.word	0xffff0000

08004414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	460b      	mov	r3, r1
 8004422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d006      	beq.n	800443e <I2C_MasterRequestWrite+0x2a>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d003      	beq.n	800443e <I2C_MasterRequestWrite+0x2a>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800443c:	d108      	bne.n	8004450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e00b      	b.n	8004468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	2b12      	cmp	r3, #18
 8004456:	d107      	bne.n	8004468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f84f 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800448e:	d103      	bne.n	8004498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004496:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e035      	b.n	8004508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044a4:	d108      	bne.n	80044b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	e01b      	b.n	80044f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044b8:	897b      	ldrh	r3, [r7, #10]
 80044ba:	11db      	asrs	r3, r3, #7
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 0306 	and.w	r3, r3, #6
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f063 030f 	orn	r3, r3, #15
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	490e      	ldr	r1, [pc, #56]	@ (8004510 <I2C_MasterRequestWrite+0xfc>)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f898 	bl	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e010      	b.n	8004508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4907      	ldr	r1, [pc, #28]	@ (8004514 <I2C_MasterRequestWrite+0x100>)
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f888 	bl	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	00010008 	.word	0x00010008
 8004514:	00010002 	.word	0x00010002

08004518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	e048      	b.n	80045bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d044      	beq.n	80045bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fe fbe7 	bl	8002d04 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d139      	bne.n	80045bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10d      	bne.n	800456e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	43da      	mvns	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	e00c      	b.n	8004588 <I2C_WaitOnFlagUntilTimeout+0x70>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	43da      	mvns	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4013      	ands	r3, r2
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	429a      	cmp	r2, r3
 800458c:	d116      	bne.n	80045bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e023      	b.n	8004604 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10d      	bne.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	43da      	mvns	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4013      	ands	r3, r2
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	e00c      	b.n	80045fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	43da      	mvns	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d093      	beq.n	800452a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800461a:	e071      	b.n	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462a:	d123      	bne.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004644:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e067      	b.n	8004744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d041      	beq.n	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fe fb42 	bl	8002d04 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d136      	bne.n	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	0c1b      	lsrs	r3, r3, #16
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d10c      	bne.n	80046b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	43da      	mvns	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4013      	ands	r3, r2
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	e00b      	b.n	80046ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	43da      	mvns	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4013      	ands	r3, r2
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e021      	b.n	8004744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d10c      	bne.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	43da      	mvns	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e00b      	b.n	800473c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	43da      	mvns	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	f47f af6d 	bne.w	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004758:	e034      	b.n	80047c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f886 	bl	800486c <I2C_IsAcknowledgeFailed>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e034      	b.n	80047d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d028      	beq.n	80047c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004772:	f7fe fac7 	bl	8002d04 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d11d      	bne.n	80047c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	2b80      	cmp	r3, #128	@ 0x80
 8004794:	d016      	beq.n	80047c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e007      	b.n	80047d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ce:	2b80      	cmp	r3, #128	@ 0x80
 80047d0:	d1c3      	bne.n	800475a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047e8:	e034      	b.n	8004854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f83e 	bl	800486c <I2C_IsAcknowledgeFailed>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e034      	b.n	8004864 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d028      	beq.n	8004854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fe fa7f 	bl	8002d04 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11d      	bne.n	8004854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d016      	beq.n	8004854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e007      	b.n	8004864 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b04      	cmp	r3, #4
 8004860:	d1c3      	bne.n	80047ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004882:	d11b      	bne.n	80048bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800488c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	f043 0204 	orr.w	r2, r3, #4
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e272      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8087 	beq.w	80049f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048e8:	4b92      	ldr	r3, [pc, #584]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d00c      	beq.n	800490e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d112      	bne.n	8004926 <HAL_RCC_OscConfig+0x5e>
 8004900:	4b8c      	ldr	r3, [pc, #560]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490c:	d10b      	bne.n	8004926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490e:	4b89      	ldr	r3, [pc, #548]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d06c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x12c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d168      	bne.n	80049f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e24c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492e:	d106      	bne.n	800493e <HAL_RCC_OscConfig+0x76>
 8004930:	4b80      	ldr	r3, [pc, #512]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a7f      	ldr	r2, [pc, #508]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e02e      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x98>
 8004946:	4b7b      	ldr	r3, [pc, #492]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a7a      	ldr	r2, [pc, #488]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800494c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b78      	ldr	r3, [pc, #480]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a77      	ldr	r2, [pc, #476]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004958:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e01d      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0xbc>
 800496a:	4b72      	ldr	r3, [pc, #456]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a71      	ldr	r2, [pc, #452]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b6f      	ldr	r3, [pc, #444]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 8004984:	4b6b      	ldr	r3, [pc, #428]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a6a      	ldr	r2, [pc, #424]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800498a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	4b68      	ldr	r3, [pc, #416]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a67      	ldr	r2, [pc, #412]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800499a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d013      	beq.n	80049cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fe f9ae 	bl	8002d04 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fe f9aa 	bl	8002d04 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	@ 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e200      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	4b5d      	ldr	r3, [pc, #372]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0xe4>
 80049ca:	e014      	b.n	80049f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fe f99a 	bl	8002d04 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d4:	f7fe f996 	bl	8002d04 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	@ 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e1ec      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e6:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x10c>
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d063      	beq.n	8004aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a02:	4b4c      	ldr	r3, [pc, #304]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a0e:	4b49      	ldr	r3, [pc, #292]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d11c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x18c>
 8004a1a:	4b46      	ldr	r3, [pc, #280]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d116      	bne.n	8004a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	4b43      	ldr	r3, [pc, #268]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_RCC_OscConfig+0x176>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e1c0      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4939      	ldr	r1, [pc, #228]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	e03a      	b.n	8004aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a5c:	4b36      	ldr	r3, [pc, #216]	@ (8004b38 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fe f94f 	bl	8002d04 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6a:	f7fe f94b 	bl	8002d04 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e1a1      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a88:	4b2a      	ldr	r3, [pc, #168]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4927      	ldr	r1, [pc, #156]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	600b      	str	r3, [r1, #0]
 8004a9c:	e015      	b.n	8004aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9e:	4b26      	ldr	r3, [pc, #152]	@ (8004b38 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe f92e 	bl	8002d04 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aac:	f7fe f92a 	bl	8002d04 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e180      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004abe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03a      	beq.n	8004b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d019      	beq.n	8004b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ade:	4b17      	ldr	r3, [pc, #92]	@ (8004b3c <HAL_RCC_OscConfig+0x274>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae4:	f7fe f90e 	bl	8002d04 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aec:	f7fe f90a 	bl	8002d04 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e160      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f000 face 	bl	80050ac <RCC_Delay>
 8004b10:	e01c      	b.n	8004b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b12:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <HAL_RCC_OscConfig+0x274>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b18:	f7fe f8f4 	bl	8002d04 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1e:	e00f      	b.n	8004b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b20:	f7fe f8f0 	bl	8002d04 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d908      	bls.n	8004b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e146      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	42420000 	.word	0x42420000
 8004b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b40:	4b92      	ldr	r3, [pc, #584]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e9      	bne.n	8004b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80a6 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10d      	bne.n	8004b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b6a:	4b88      	ldr	r3, [pc, #544]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	4a87      	ldr	r2, [pc, #540]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b74:	61d3      	str	r3, [r2, #28]
 8004b76:	4b85      	ldr	r3, [pc, #532]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	4b82      	ldr	r3, [pc, #520]	@ (8004d90 <HAL_RCC_OscConfig+0x4c8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d118      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b92:	4b7f      	ldr	r3, [pc, #508]	@ (8004d90 <HAL_RCC_OscConfig+0x4c8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7e      	ldr	r2, [pc, #504]	@ (8004d90 <HAL_RCC_OscConfig+0x4c8>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9e:	f7fe f8b1 	bl	8002d04 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba6:	f7fe f8ad 	bl	8002d04 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b64      	cmp	r3, #100	@ 0x64
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e103      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	4b75      	ldr	r3, [pc, #468]	@ (8004d90 <HAL_RCC_OscConfig+0x4c8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x312>
 8004bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	6213      	str	r3, [r2, #32]
 8004bd8:	e02d      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x334>
 8004be2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4a69      	ldr	r2, [pc, #420]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6213      	str	r3, [r2, #32]
 8004bee:	4b67      	ldr	r3, [pc, #412]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4a66      	ldr	r2, [pc, #408]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	f023 0304 	bic.w	r3, r3, #4
 8004bf8:	6213      	str	r3, [r2, #32]
 8004bfa:	e01c      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCC_OscConfig+0x356>
 8004c04:	4b61      	ldr	r3, [pc, #388]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	4a60      	ldr	r2, [pc, #384]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	6213      	str	r3, [r2, #32]
 8004c10:	4b5e      	ldr	r3, [pc, #376]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4a5d      	ldr	r2, [pc, #372]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6213      	str	r3, [r2, #32]
 8004c1c:	e00b      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004c1e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	4a5a      	ldr	r2, [pc, #360]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6213      	str	r3, [r2, #32]
 8004c2a:	4b58      	ldr	r3, [pc, #352]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4a57      	ldr	r2, [pc, #348]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d015      	beq.n	8004c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3e:	f7fe f861 	bl	8002d04 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fe f85d 	bl	8002d04 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0b1      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ee      	beq.n	8004c46 <HAL_RCC_OscConfig+0x37e>
 8004c68:	e014      	b.n	8004c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6a:	f7fe f84b 	bl	8002d04 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fe f847 	bl	8002d04 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e09b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c88:	4b40      	ldr	r3, [pc, #256]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ee      	bne.n	8004c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8087 	beq.w	8004dbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb0:	4b36      	ldr	r3, [pc, #216]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d061      	beq.n	8004d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d146      	bne.n	8004d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc4:	4b33      	ldr	r3, [pc, #204]	@ (8004d94 <HAL_RCC_OscConfig+0x4cc>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cca:	f7fe f81b 	bl	8002d04 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd2:	f7fe f817 	bl	8002d04 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e06d      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce4:	4b29      	ldr	r3, [pc, #164]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf8:	d108      	bne.n	8004d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4921      	ldr	r1, [pc, #132]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a19      	ldr	r1, [r3, #32]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	491b      	ldr	r1, [pc, #108]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d24:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fd ffeb 	bl	8002d04 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fd ffe7 	bl	8002d04 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e03d      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d44:	4b11      	ldr	r3, [pc, #68]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x46a>
 8004d50:	e035      	b.n	8004dbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d52:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <HAL_RCC_OscConfig+0x4cc>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d58:	f7fd ffd4 	bl	8002d04 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd ffd0 	bl	8002d04 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e026      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d72:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x498>
 8004d7e:	e01e      	b.n	8004dbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d107      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e019      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40007000 	.word	0x40007000
 8004d94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_RCC_OscConfig+0x500>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000

08004dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0d0      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d910      	bls.n	8004e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b67      	ldr	r3, [pc, #412]	@ (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 0207 	bic.w	r2, r3, #7
 8004df6:	4965      	ldr	r1, [pc, #404]	@ (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	4b63      	ldr	r3, [pc, #396]	@ (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0b8      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e28:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a58      	ldr	r2, [pc, #352]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e40:	4b53      	ldr	r3, [pc, #332]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a52      	ldr	r2, [pc, #328]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e4c:	4b50      	ldr	r3, [pc, #320]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	494d      	ldr	r1, [pc, #308]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d040      	beq.n	8004eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d107      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	4b47      	ldr	r3, [pc, #284]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d115      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e07f      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8a:	4b41      	ldr	r3, [pc, #260]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e073      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e06b      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eaa:	4b39      	ldr	r3, [pc, #228]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f023 0203 	bic.w	r2, r3, #3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4936      	ldr	r1, [pc, #216]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ebc:	f7fd ff22 	bl	8002d04 <HAL_GetTick>
 8004ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec4:	f7fd ff1e 	bl	8002d04 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e053      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eda:	4b2d      	ldr	r3, [pc, #180]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 020c 	and.w	r2, r3, #12
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d1eb      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eec:	4b27      	ldr	r3, [pc, #156]	@ (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d210      	bcs.n	8004f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b24      	ldr	r3, [pc, #144]	@ (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 0207 	bic.w	r2, r3, #7
 8004f02:	4922      	ldr	r1, [pc, #136]	@ (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b20      	ldr	r3, [pc, #128]	@ (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e032      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f28:	4b19      	ldr	r3, [pc, #100]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4916      	ldr	r1, [pc, #88]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f46:	4b12      	ldr	r3, [pc, #72]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	490e      	ldr	r1, [pc, #56]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f5a:	f000 f821 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	490a      	ldr	r1, [pc, #40]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6c:	5ccb      	ldrb	r3, [r1, r3]
 8004f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f72:	4a09      	ldr	r2, [pc, #36]	@ (8004f98 <HAL_RCC_ClockConfig+0x1cc>)
 8004f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f76:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <HAL_RCC_ClockConfig+0x1d0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fd fe80 	bl	8002c80 <HAL_InitTick>

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40022000 	.word	0x40022000
 8004f90:	40021000 	.word	0x40021000
 8004f94:	08006a3c 	.word	0x08006a3c
 8004f98:	20000200 	.word	0x20000200
 8004f9c:	20000204 	.word	0x20000204

08004fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fba:	4b1e      	ldr	r3, [pc, #120]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d002      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8004fce:	e027      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fd0:	4b19      	ldr	r3, [pc, #100]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fd2:	613b      	str	r3, [r7, #16]
      break;
 8004fd4:	e027      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	0c9b      	lsrs	r3, r3, #18
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	4a17      	ldr	r2, [pc, #92]	@ (800503c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fe0:	5cd3      	ldrb	r3, [r2, r3]
 8004fe2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d010      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fee:	4b11      	ldr	r3, [pc, #68]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	0c5b      	lsrs	r3, r3, #17
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	4a11      	ldr	r2, [pc, #68]	@ (8005040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a0d      	ldr	r2, [pc, #52]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x98>)
 8005002:	fb03 f202 	mul.w	r2, r3, r2
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e004      	b.n	800501a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a0c      	ldr	r2, [pc, #48]	@ (8005044 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	613b      	str	r3, [r7, #16]
      break;
 800501e:	e002      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x98>)
 8005022:	613b      	str	r3, [r7, #16]
      break;
 8005024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005026:	693b      	ldr	r3, [r7, #16]
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	007a1200 	.word	0x007a1200
 800503c:	08006ea4 	.word	0x08006ea4
 8005040:	08006eb4 	.word	0x08006eb4
 8005044:	003d0900 	.word	0x003d0900

08005048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800504c:	4b02      	ldr	r3, [pc, #8]	@ (8005058 <HAL_RCC_GetHCLKFreq+0x10>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	20000200 	.word	0x20000200

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005060:	f7ff fff2 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b05      	ldr	r3, [pc, #20]	@ (800507c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4903      	ldr	r1, [pc, #12]	@ (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	08006a4c 	.word	0x08006a4c

08005084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005088:	f7ff ffde 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	0adb      	lsrs	r3, r3, #11
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	4903      	ldr	r1, [pc, #12]	@ (80050a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	08006a4c 	.word	0x08006a4c

080050ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050b4:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <RCC_Delay+0x34>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a0a      	ldr	r2, [pc, #40]	@ (80050e4 <RCC_Delay+0x38>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	0a5b      	lsrs	r3, r3, #9
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050c8:	bf00      	nop
  }
  while (Delay --);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	60fa      	str	r2, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f9      	bne.n	80050c8 <RCC_Delay+0x1c>
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	20000200 	.word	0x20000200
 80050e4:	10624dd3 	.word	0x10624dd3

080050e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d07d      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005108:	4b4f      	ldr	r3, [pc, #316]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10d      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005114:	4b4c      	ldr	r3, [pc, #304]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4a4b      	ldr	r2, [pc, #300]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800511e:	61d3      	str	r3, [r2, #28]
 8005120:	4b49      	ldr	r3, [pc, #292]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512c:	2301      	movs	r3, #1
 800512e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	4b46      	ldr	r3, [pc, #280]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d118      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513c:	4b43      	ldr	r3, [pc, #268]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a42      	ldr	r2, [pc, #264]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005148:	f7fd fddc 	bl	8002d04 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514e:	e008      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005150:	f7fd fdd8 	bl	8002d04 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	@ 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e06d      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005162:	4b3a      	ldr	r3, [pc, #232]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800516e:	4b36      	ldr	r3, [pc, #216]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005176:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d02e      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	429a      	cmp	r2, r3
 800518a:	d027      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800518c:	4b2e      	ldr	r3, [pc, #184]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005194:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005196:	4b2e      	ldr	r3, [pc, #184]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005198:	2201      	movs	r2, #1
 800519a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800519c:	4b2c      	ldr	r3, [pc, #176]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051a2:	4a29      	ldr	r2, [pc, #164]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d014      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b2:	f7fd fda7 	bl	8002d04 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b8:	e00a      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ba:	f7fd fda3 	bl	8002d04 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e036      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0ee      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4917      	ldr	r1, [pc, #92]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f4:	4b14      	ldr	r3, [pc, #80]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800520c:	4b0e      	ldr	r3, [pc, #56]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	490b      	ldr	r1, [pc, #44]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521a:	4313      	orrs	r3, r2
 800521c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b00      	cmp	r3, #0
 8005228:	d008      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800522a:	4b07      	ldr	r3, [pc, #28]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	4904      	ldr	r1, [pc, #16]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005238:	4313      	orrs	r3, r2
 800523a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	40007000 	.word	0x40007000
 8005250:	42420440 	.word	0x42420440

08005254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e041      	b.n	80052ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fb fdc4 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f000 fb8c 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d001      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e03a      	b.n	8005382 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a18      	ldr	r2, [pc, #96]	@ (800538c <HAL_TIM_Base_Start_IT+0x98>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00e      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x58>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005336:	d009      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x58>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a14      	ldr	r2, [pc, #80]	@ (8005390 <HAL_TIM_Base_Start_IT+0x9c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x58>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a13      	ldr	r2, [pc, #76]	@ (8005394 <HAL_TIM_Base_Start_IT+0xa0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d111      	bne.n	8005370 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b06      	cmp	r3, #6
 800535c:	d010      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	e007      	b.n	8005380 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800

08005398 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e093      	b.n	80054d4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fb fd45 	bl	8000e50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053dc:	f023 0307 	bic.w	r3, r3, #7
 80053e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f000 fadf 	bl	80059b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	4313      	orrs	r3, r2
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005438:	f023 030c 	bic.w	r3, r3, #12
 800543c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005444:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	4313      	orrs	r3, r2
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	011a      	lsls	r2, r3, #4
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	031b      	lsls	r3, r3, #12
 8005468:	4313      	orrs	r3, r2
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	4313      	orrs	r3, r2
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005504:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d110      	bne.n	800552e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d102      	bne.n	8005518 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005512:	7b7b      	ldrb	r3, [r7, #13]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d001      	beq.n	800551c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e069      	b.n	80055f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800552c:	e031      	b.n	8005592 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b04      	cmp	r3, #4
 8005532:	d110      	bne.n	8005556 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d102      	bne.n	8005540 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800553a:	7b3b      	ldrb	r3, [r7, #12]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d001      	beq.n	8005544 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e055      	b.n	80055f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005554:	e01d      	b.n	8005592 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d108      	bne.n	800556e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800555c:	7bbb      	ldrb	r3, [r7, #14]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d105      	bne.n	800556e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005562:	7b7b      	ldrb	r3, [r7, #13]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d102      	bne.n	800556e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005568:	7b3b      	ldrb	r3, [r7, #12]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d001      	beq.n	8005572 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e03e      	b.n	80055f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_TIM_Encoder_Start+0xc4>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b04      	cmp	r3, #4
 800559c:	d008      	beq.n	80055b0 <HAL_TIM_Encoder_Start+0xd4>
 800559e:	e00f      	b.n	80055c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2201      	movs	r2, #1
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fb05 	bl	8005bb8 <TIM_CCxChannelCmd>
      break;
 80055ae:	e016      	b.n	80055de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	2104      	movs	r1, #4
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fafd 	bl	8005bb8 <TIM_CCxChannelCmd>
      break;
 80055be:	e00e      	b.n	80055de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2201      	movs	r2, #1
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 faf5 	bl	8005bb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	2104      	movs	r1, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 faee 	bl	8005bb8 <TIM_CCxChannelCmd>
      break;
 80055dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d020      	beq.n	800565c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01b      	beq.n	800565c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0202 	mvn.w	r2, #2
 800562c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f998 	bl	8005978 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f98b 	bl	8005966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f99a 	bl	800598a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d020      	beq.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01b      	beq.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0204 	mvn.w	r2, #4
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f972 	bl	8005978 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f965 	bl	8005966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f974 	bl	800598a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d020      	beq.n	80056f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01b      	beq.n	80056f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0208 	mvn.w	r2, #8
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2204      	movs	r2, #4
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f94c 	bl	8005978 <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f93f 	bl	8005966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f94e 	bl	800598a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d020      	beq.n	8005740 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01b      	beq.n	8005740 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0210 	mvn.w	r2, #16
 8005710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2208      	movs	r2, #8
 8005716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f926 	bl	8005978 <HAL_TIM_IC_CaptureCallback>
 800572c:	e005      	b.n	800573a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f919 	bl	8005966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f928 	bl	800598a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0201 	mvn.w	r2, #1
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fa fd78 	bl	8000254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00c      	beq.n	8005788 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 faa3 	bl	8005cce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00c      	beq.n	80057ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f8f8 	bl	800599c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00c      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0220 	mvn.w	r2, #32
 80057c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa76 	bl	8005cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e0b4      	b.n	800595e <HAL_TIM_ConfigClockSource+0x186>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800582c:	d03e      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0xd4>
 800582e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005832:	f200 8087 	bhi.w	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800583a:	f000 8086 	beq.w	800594a <HAL_TIM_ConfigClockSource+0x172>
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005842:	d87f      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b70      	cmp	r3, #112	@ 0x70
 8005846:	d01a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xa6>
 8005848:	2b70      	cmp	r3, #112	@ 0x70
 800584a:	d87b      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b60      	cmp	r3, #96	@ 0x60
 800584e:	d050      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005850:	2b60      	cmp	r3, #96	@ 0x60
 8005852:	d877      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b50      	cmp	r3, #80	@ 0x50
 8005856:	d03c      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005858:	2b50      	cmp	r3, #80	@ 0x50
 800585a:	d873      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b40      	cmp	r3, #64	@ 0x40
 800585e:	d058      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x13a>
 8005860:	2b40      	cmp	r3, #64	@ 0x40
 8005862:	d86f      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b30      	cmp	r3, #48	@ 0x30
 8005866:	d064      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x15a>
 8005868:	2b30      	cmp	r3, #48	@ 0x30
 800586a:	d86b      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b20      	cmp	r3, #32
 800586e:	d060      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x15a>
 8005870:	2b20      	cmp	r3, #32
 8005872:	d867      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d05c      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x15a>
 8005878:	2b10      	cmp	r3, #16
 800587a:	d05a      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x15a>
 800587c:	e062      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800588e:	f000 f974 	bl	8005b7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	609a      	str	r2, [r3, #8]
      break;
 80058aa:	e04f      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058bc:	f000 f95d 	bl	8005b7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058ce:	609a      	str	r2, [r3, #8]
      break;
 80058d0:	e03c      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 f8d4 	bl	8005a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2150      	movs	r1, #80	@ 0x50
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f92b 	bl	8005b46 <TIM_ITRx_SetConfig>
      break;
 80058f0:	e02c      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 f8f2 	bl	8005ae8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2160      	movs	r1, #96	@ 0x60
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f91b 	bl	8005b46 <TIM_ITRx_SetConfig>
      break;
 8005910:	e01c      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	461a      	mov	r2, r3
 8005920:	f000 f8b4 	bl	8005a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2140      	movs	r1, #64	@ 0x40
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f90b 	bl	8005b46 <TIM_ITRx_SetConfig>
      break;
 8005930:	e00c      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 f902 	bl	8005b46 <TIM_ITRx_SetConfig>
      break;
 8005942:	e003      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      break;
 8005948:	e000      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800594a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
	...

080059b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005a80 <TIM_Base_SetConfig+0xd0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00b      	beq.n	80059e0 <TIM_Base_SetConfig+0x30>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ce:	d007      	beq.n	80059e0 <TIM_Base_SetConfig+0x30>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a84 <TIM_Base_SetConfig+0xd4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_Base_SetConfig+0x30>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a2b      	ldr	r2, [pc, #172]	@ (8005a88 <TIM_Base_SetConfig+0xd8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d108      	bne.n	80059f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a22      	ldr	r2, [pc, #136]	@ (8005a80 <TIM_Base_SetConfig+0xd0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <TIM_Base_SetConfig+0x62>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a00:	d007      	beq.n	8005a12 <TIM_Base_SetConfig+0x62>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1f      	ldr	r2, [pc, #124]	@ (8005a84 <TIM_Base_SetConfig+0xd4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_Base_SetConfig+0x62>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005a88 <TIM_Base_SetConfig+0xd8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d108      	bne.n	8005a24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a80 <TIM_Base_SetConfig+0xd0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d103      	bne.n	8005a58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	611a      	str	r2, [r3, #16]
  }
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800

08005a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f023 030a 	bic.w	r3, r3, #10
 8005ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0210 	bic.w	r2, r3, #16
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	031b      	lsls	r3, r3, #12
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	621a      	str	r2, [r3, #32]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b085      	sub	sp, #20
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f043 0307 	orr.w	r3, r3, #7
 8005b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	021a      	lsls	r2, r3, #8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	609a      	str	r2, [r3, #8]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2201      	movs	r2, #1
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1a      	ldr	r2, [r3, #32]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	401a      	ands	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e046      	b.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a16      	ldr	r2, [pc, #88]	@ (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00e      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c64:	d009      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a12      	ldr	r2, [pc, #72]	@ (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a10      	ldr	r2, [pc, #64]	@ (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10c      	bne.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800

08005cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e042      	b.n	8005d78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fb f8e0 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2224      	movs	r2, #36	@ 0x24
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fdb7 	bl	8006898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	@ 0x28
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d175      	bne.n	8005e8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_UART_Transmit+0x2c>
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e06e      	b.n	8005e8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2221      	movs	r2, #33	@ 0x21
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dbe:	f7fc ffa1 	bl	8002d04 <HAL_GetTick>
 8005dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	88fa      	ldrh	r2, [r7, #6]
 8005dce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd8:	d108      	bne.n	8005dec <HAL_UART_Transmit+0x6c>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e003      	b.n	8005df4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005df4:	e02e      	b.n	8005e54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2180      	movs	r1, #128	@ 0x80
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fb1c 	bl	800643e <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e03a      	b.n	8005e8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	3302      	adds	r3, #2
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e007      	b.n	8005e46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	781a      	ldrb	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1cb      	bne.n	8005df6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2140      	movs	r1, #64	@ 0x40
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fae8 	bl	800643e <UART_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e006      	b.n	8005e8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e000      	b.n	8005e8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e8c:	2302      	movs	r3, #2
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d112      	bne.n	8005ed6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Receive_IT+0x26>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e00b      	b.n	8005ed8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fb0f 	bl	80064f0 <UART_Start_Receive_IT>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	e000      	b.n	8005ed8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
  }
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b0ba      	sub	sp, #232	@ 0xe8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10f      	bne.n	8005f46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <HAL_UART_IRQHandler+0x66>
 8005f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fbec 	bl	800671c <UART_Receive_IT>
      return;
 8005f44:	e25b      	b.n	80063fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80de 	beq.w	800610c <HAL_UART_IRQHandler+0x22c>
 8005f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80d1 	beq.w	800610c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <HAL_UART_IRQHandler+0xae>
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <HAL_UART_IRQHandler+0xd2>
 8005f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	f043 0202 	orr.w	r2, r3, #2
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <HAL_UART_IRQHandler+0xf6>
 8005fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fce:	f043 0204 	orr.w	r2, r3, #4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d011      	beq.n	8006006 <HAL_UART_IRQHandler+0x126>
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d105      	bne.n	8005ffa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffe:	f043 0208 	orr.w	r2, r3, #8
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 81f2 	beq.w	80063f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_UART_IRQHandler+0x14e>
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb77 	bl	800671c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <HAL_UART_IRQHandler+0x17a>
 8006052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d04f      	beq.n	80060fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa81 	bl	8006562 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d041      	beq.n	80060f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3314      	adds	r3, #20
 8006074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800608c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800609a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800609e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1d9      	bne.n	800606e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d013      	beq.n	80060ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c6:	4a7e      	ldr	r2, [pc, #504]	@ (80062c0 <HAL_UART_IRQHandler+0x3e0>)
 80060c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fd fc16 	bl	8003900 <HAL_DMA_Abort_IT>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d016      	beq.n	8006108 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060e4:	4610      	mov	r0, r2
 80060e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e00e      	b.n	8006108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f993 	bl	8006416 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	e00a      	b.n	8006108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f98f 	bl	8006416 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f8:	e006      	b.n	8006108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f98b 	bl	8006416 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006106:	e175      	b.n	80063f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	bf00      	nop
    return;
 800610a:	e173      	b.n	80063f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 814f 	bne.w	80063b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 8148 	beq.w	80063b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 8141 	beq.w	80063b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80b6 	beq.w	80062c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8145 	beq.w	80063f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006176:	429a      	cmp	r2, r3
 8006178:	f080 813e 	bcs.w	80063f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006182:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	2b20      	cmp	r3, #32
 800618c:	f000 8088 	beq.w	80062a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	330c      	adds	r3, #12
 8006196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80061bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1d9      	bne.n	8006190 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3314      	adds	r3, #20
 80061e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006200:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006204:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006208:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e1      	bne.n	80061dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3314      	adds	r3, #20
 800621e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800622a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800622e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800623c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800623e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006242:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800624a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e3      	bne.n	8006218 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800626e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006270:	f023 0310 	bic.w	r3, r3, #16
 8006274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006282:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006284:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e3      	bne.n	800625e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629a:	4618      	mov	r0, r3
 800629c:	f7fd faf4 	bl	8003888 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8b6 	bl	8006428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062bc:	e09c      	b.n	80063f8 <HAL_UART_IRQHandler+0x518>
 80062be:	bf00      	nop
 80062c0:	08006627 	.word	0x08006627
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 808e 	beq.w	80063fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80062e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8089 	beq.w	80063fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800630e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006310:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800631c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e3      	bne.n	80062ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	623b      	str	r3, [r7, #32]
   return(result);
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006346:	633a      	str	r2, [r7, #48]	@ 0x30
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800634c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e3      	bne.n	8006322 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	60fb      	str	r3, [r7, #12]
   return(result);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800638c:	61fa      	str	r2, [r7, #28]
 800638e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	69b9      	ldr	r1, [r7, #24]
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	617b      	str	r3, [r7, #20]
   return(result);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e3      	bne.n	8006368 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f83b 	bl	8006428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063b2:	e023      	b.n	80063fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <HAL_UART_IRQHandler+0x4f4>
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f93e 	bl	800664e <UART_Transmit_IT>
    return;
 80063d2:	e014      	b.n	80063fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <HAL_UART_IRQHandler+0x51e>
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f97d 	bl	80066ec <UART_EndTransmit_IT>
    return;
 80063f2:	e004      	b.n	80063fe <HAL_UART_IRQHandler+0x51e>
    return;
 80063f4:	bf00      	nop
 80063f6:	e002      	b.n	80063fe <HAL_UART_IRQHandler+0x51e>
      return;
 80063f8:	bf00      	nop
 80063fa:	e000      	b.n	80063fe <HAL_UART_IRQHandler+0x51e>
      return;
 80063fc:	bf00      	nop
  }
}
 80063fe:	37e8      	adds	r7, #232	@ 0xe8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	bc80      	pop	{r7}
 800643c:	4770      	bx	lr

0800643e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	603b      	str	r3, [r7, #0]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644e:	e03b      	b.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d037      	beq.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006458:	f7fc fc54 	bl	8002d04 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	429a      	cmp	r2, r3
 8006466:	d302      	bcc.n	800646e <UART_WaitOnFlagUntilTimeout+0x30>
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e03a      	b.n	80064e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d023      	beq.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b80      	cmp	r3, #128	@ 0x80
 8006484:	d020      	beq.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b40      	cmp	r3, #64	@ 0x40
 800648a:	d01d      	beq.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	d116      	bne.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f856 	bl	8006562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2208      	movs	r2, #8
 80064ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e00f      	b.n	80064e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4013      	ands	r3, r2
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d0b4      	beq.n	8006450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2222      	movs	r2, #34	@ 0x22
 800651a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006534:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695a      	ldr	r2, [r3, #20]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0201 	orr.w	r2, r2, #1
 8006544:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0220 	orr.w	r2, r2, #32
 8006554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr

08006562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006562:	b480      	push	{r7}
 8006564:	b095      	sub	sp, #84	@ 0x54
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	330c      	adds	r3, #12
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	330c      	adds	r3, #12
 8006588:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800658a:	643a      	str	r2, [r7, #64]	@ 0x40
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e5      	bne.n	800656a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3314      	adds	r3, #20
 80065a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3314      	adds	r3, #20
 80065bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d119      	bne.n	800660e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f023 0310 	bic.w	r3, r3, #16
 80065f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065fa:	61ba      	str	r2, [r7, #24]
 80065fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6979      	ldr	r1, [r7, #20]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	613b      	str	r3, [r7, #16]
   return(result);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800661c:	bf00      	nop
 800661e:	3754      	adds	r7, #84	@ 0x54
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fee8 	bl	8006416 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b21      	cmp	r3, #33	@ 0x21
 8006660:	d13e      	bne.n	80066e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666a:	d114      	bne.n	8006696 <UART_Transmit_IT+0x48>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d110      	bne.n	8006696 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006688:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	621a      	str	r2, [r3, #32]
 8006694:	e008      	b.n	80066a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6211      	str	r1, [r2, #32]
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	4619      	mov	r1, r3
 80066b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10f      	bne.n	80066dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006702:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fe79 	bl	8006404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08c      	sub	sp, #48	@ 0x30
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b22      	cmp	r3, #34	@ 0x22
 800672e:	f040 80ae 	bne.w	800688e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673a:	d117      	bne.n	800676c <UART_Receive_IT+0x50>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d113      	bne.n	800676c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675a:	b29a      	uxth	r2, r3
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	1c9a      	adds	r2, r3, #2
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	629a      	str	r2, [r3, #40]	@ 0x28
 800676a:	e026      	b.n	80067ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006770:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677e:	d007      	beq.n	8006790 <UART_Receive_IT+0x74>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <UART_Receive_IT+0x82>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	e008      	b.n	80067b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4619      	mov	r1, r3
 80067c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d15d      	bne.n	800688a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0220 	bic.w	r2, r2, #32
 80067dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695a      	ldr	r2, [r3, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006810:	2b01      	cmp	r3, #1
 8006812:	d135      	bne.n	8006880 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	330c      	adds	r3, #12
 8006820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	613b      	str	r3, [r7, #16]
   return(result);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f023 0310 	bic.w	r3, r3, #16
 8006830:	627b      	str	r3, [r7, #36]	@ 0x24
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800683a:	623a      	str	r2, [r7, #32]
 800683c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	69f9      	ldr	r1, [r7, #28]
 8006840:	6a3a      	ldr	r2, [r7, #32]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	61bb      	str	r3, [r7, #24]
   return(result);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b10      	cmp	r3, #16
 800685a:	d10a      	bne.n	8006872 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff fdd5 	bl	8006428 <HAL_UARTEx_RxEventCallback>
 800687e:	e002      	b.n	8006886 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7f9 fecd 	bl	8000620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	e002      	b.n	8006890 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3730      	adds	r7, #48	@ 0x30
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80068d2:	f023 030c 	bic.w	r3, r3, #12
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	430b      	orrs	r3, r1
 80068de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2c      	ldr	r2, [pc, #176]	@ (80069ac <UART_SetConfig+0x114>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d103      	bne.n	8006908 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006900:	f7fe fbc0 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	e002      	b.n	800690e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006908:	f7fe fba8 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 800690c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009a      	lsls	r2, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	4a22      	ldr	r2, [pc, #136]	@ (80069b0 <UART_SetConfig+0x118>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	0119      	lsls	r1, r3, #4
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009a      	lsls	r2, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	fbb2 f2f3 	udiv	r2, r2, r3
 8006944:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <UART_SetConfig+0x118>)
 8006946:	fba3 0302 	umull	r0, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	2064      	movs	r0, #100	@ 0x64
 800694e:	fb00 f303 	mul.w	r3, r0, r3
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	3332      	adds	r3, #50	@ 0x32
 8006958:	4a15      	ldr	r2, [pc, #84]	@ (80069b0 <UART_SetConfig+0x118>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006964:	4419      	add	r1, r3
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4613      	mov	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	009a      	lsls	r2, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	fbb2 f2f3 	udiv	r2, r2, r3
 800697c:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <UART_SetConfig+0x118>)
 800697e:	fba3 0302 	umull	r0, r3, r3, r2
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	2064      	movs	r0, #100	@ 0x64
 8006986:	fb00 f303 	mul.w	r3, r0, r3
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	3332      	adds	r3, #50	@ 0x32
 8006990:	4a07      	ldr	r2, [pc, #28]	@ (80069b0 <UART_SetConfig+0x118>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	f003 020f 	and.w	r2, r3, #15
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	440a      	add	r2, r1
 80069a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40013800 	.word	0x40013800
 80069b0:	51eb851f 	.word	0x51eb851f

080069b4 <memset>:
 80069b4:	4603      	mov	r3, r0
 80069b6:	4402      	add	r2, r0
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d100      	bne.n	80069be <memset+0xa>
 80069bc:	4770      	bx	lr
 80069be:	f803 1b01 	strb.w	r1, [r3], #1
 80069c2:	e7f9      	b.n	80069b8 <memset+0x4>

080069c4 <__libc_init_array>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	2600      	movs	r6, #0
 80069c8:	4d0c      	ldr	r5, [pc, #48]	@ (80069fc <__libc_init_array+0x38>)
 80069ca:	4c0d      	ldr	r4, [pc, #52]	@ (8006a00 <__libc_init_array+0x3c>)
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	42a6      	cmp	r6, r4
 80069d2:	d109      	bne.n	80069e8 <__libc_init_array+0x24>
 80069d4:	f000 f81a 	bl	8006a0c <_init>
 80069d8:	2600      	movs	r6, #0
 80069da:	4d0a      	ldr	r5, [pc, #40]	@ (8006a04 <__libc_init_array+0x40>)
 80069dc:	4c0a      	ldr	r4, [pc, #40]	@ (8006a08 <__libc_init_array+0x44>)
 80069de:	1b64      	subs	r4, r4, r5
 80069e0:	10a4      	asrs	r4, r4, #2
 80069e2:	42a6      	cmp	r6, r4
 80069e4:	d105      	bne.n	80069f2 <__libc_init_array+0x2e>
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
 80069e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ec:	4798      	blx	r3
 80069ee:	3601      	adds	r6, #1
 80069f0:	e7ee      	b.n	80069d0 <__libc_init_array+0xc>
 80069f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f6:	4798      	blx	r3
 80069f8:	3601      	adds	r6, #1
 80069fa:	e7f2      	b.n	80069e2 <__libc_init_array+0x1e>
 80069fc:	08006eb8 	.word	0x08006eb8
 8006a00:	08006eb8 	.word	0x08006eb8
 8006a04:	08006eb8 	.word	0x08006eb8
 8006a08:	08006ebc 	.word	0x08006ebc

08006a0c <_init>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr

08006a18 <_fini>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr
